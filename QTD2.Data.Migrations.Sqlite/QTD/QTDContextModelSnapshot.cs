// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QTD2.Data;

namespace QTD2.Data.Migrations.Sqlite.QTD
{
    [DbContext(typeof(QTDContext))]
    partial class QTDContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ActivityNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ActivityNotifications");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.AssessmentTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AssessmentTools");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CBT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Availablity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CBTLearningContractInstructions")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("DueDateAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DueDateInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ILAId");

                    b.ToTable("CBTs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CBT_ScormRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CBTScormUploadId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassScheduleEmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LaunchLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RegistrationCompletion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegistrationSuccess")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.Property<int?>("ScormUploadId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassScheduleEmployeeId")
                        .IsUnique();

                    b.HasIndex("ScormUploadId");

                    b.ToTable("CBT_ScormRegistration");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CBT_ScormUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CbtId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ConnectedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DisconnectedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScormStatus")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CbtId");

                    b.ToTable("CBT_ScormUpload");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("AdditionalHours")
                        .HasColumnType("REAL");

                    b.Property<bool?>("AllowRolloverHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertAcronym")
                        .HasColumnType("TEXT");

                    b.Property<string>("CertDesc")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("CertMemberNum")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CertNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("CertSubReq")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("CertSubReqHours")
                        .HasColumnType("REAL");

                    b.Property<string>("CertSubReqName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("CertifiedDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CertifyingBodyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<float?>("CreditHrs")
                        .HasColumnType("REAL");

                    b.Property<bool?>("CreditHrsReq")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ExpirationDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("RenewalDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RenewalInterval")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("RenewalTimeFrame")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CertifyingBodyId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CertificationIssuingAuthority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CertificationIssuingAuthorities");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CertificationSubRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CertificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReqHour")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReqName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.ToTable("CertificationSubRequirements");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Certification_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CertId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CertificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.ToTable("Certification_History");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CertifyingBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Desc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsNERC")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CertifyingBodies");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CertifyingBody_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CertifyingBodyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CertifyingBodyId");

                    b.ToTable("CertifyingBody_History");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ILAID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecurring")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProviderID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecurrenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebinarLink")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ILAID");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProviderID");

                    b.HasIndex("RecurrenceId");

                    b.ToTable("ClassSchedules");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassScheduleHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClassScheduleID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassScheduleID");

                    b.ToTable("ClassScheduleHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CBTStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EnrolledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FinalGrade")
                        .HasColumnType("TEXT");

                    b.Property<int>("FinalScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GradeNotes")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDropped")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnrolled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWaitlisted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PlannedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PreTestStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RetakeStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestStatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CBTStatusId");

                    b.HasIndex("ClassScheduleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PreTestStatusId");

                    b.HasIndex("RetakeStatusId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestStatusId");

                    b.ToTable("ClassScheduleEmployees");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_Evaluation_Roster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentEvaluationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassScheduleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StudentEvaluationId");

                    b.ToTable("ClassSchedule_Evaluation_Roster");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_Recurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DaysForWeeklyDailyOrMonthly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool?>("Fri")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Mon")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NthDayMonthly")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RecurrenceEndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecurrencePattern")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecurrenceStartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecurrenceType")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Sat")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Sun")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Thu")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Tue")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Wed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.ToTable("ClassSchedule_Recurrences");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_Roster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("Disclaimer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Grade")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Interrupted")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsReleased")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Restarted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RetakeOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassScheduleId");

                    b.HasIndex("EmpId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("ClassSchedule_Roster");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_Roster_Statuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ClassSchedule_Roster_Statuses");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_StudentEvaluations_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentEvaluationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassScheduleId");

                    b.HasIndex("StudentEvaluationId");

                    b.ToTable("ClassSchedule_StudentEvaluations_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_GeneralSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassStartEndTimeFormat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CompanySpecificCoursePassingScore")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateFormat")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ClientSettings_GeneralSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_LabelReplacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultLabel")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("LabelReplacement")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ClientSettings_LabelReplacements");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivationCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ClientSettings_Licenses");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimingText")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ClientSettings_Notifications");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_AvailableCustomSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientSettingsNotificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Setting")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientSettingsNotificationId");

                    b.ToTable("ClientSettings_Notification_AvailableCustomSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_CustomSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientSettingsNotificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientSettingsNotificationId");

                    b.ToTable("ClientSettings_Notification_CustomSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientSettingsNotificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientSettingsNotificationId");

                    b.ToTable("ClientSettings_Notification_Steps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step_AvailableCustomSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientSettingsNotificationStepId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Setting")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientSettingsNotificationStepId");

                    b.ToTable("ClientSettings_Notification_Step_AvailableCustomSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step_CustomSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientSettingsNotificationStepId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientSettingsNotificationStepId");

                    b.ToTable("ClientSettings_Notification_Step_CustomSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step_ModelItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientSettingsNotificationStepId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientSettingsNotificationStepId");

                    b.ToTable("ClientSettings_Notification_Step_ModelItems");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step_Recipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientSettingsNotificationStepId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientSettingsNotificationStepId");

                    b.ToTable("ClientSettings_Notification_Step_Recipients");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("ClientUsers");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientUserSettings_DashboardSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DashboardSettingId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("DashboardSettingId");

                    b.ToTable("ClientUserSettings_DashboardSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CollaboratorInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("InviteDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvitedByEID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InvitedMessage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("InviteeEID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InviteeEmailID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InvitedByEID");

                    b.HasIndex("InviteeEID");

                    b.ToTable("CollaboratorInvitations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CoverSheetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CoverSheetTypes");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Coversheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("CoversheetFileUpload")
                        .HasColumnType("BLOB");

                    b.Property<string>("CoversheetImageUpload")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoversheetInstructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CoversheetTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CoversheetTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Coversheets");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CustomEnablingObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomEONumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EO_CatId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EO_SubCatId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EO_TopicId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAddtoEO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EO_CatId");

                    b.HasIndex("EO_SubCatId");

                    b.HasIndex("EO_TopicId");

                    b.ToTable("CustomEnablingObjectives");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.DashboardSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("GroupName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DashboardSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatorIlaId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsAvailableForAllIlas")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNerc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsUserDefined")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.DiscussionQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerFileUpload")
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswerImageUpload")
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswerKeywords")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILATraineeEvaluationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionFileUpload")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionImageUpload")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionLinksUpload")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ILATraineeEvaluationId");

                    b.ToTable("DiscussionQuestions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.DutyArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReasonForRevision")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DutyAreas");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.DutyArea_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("DutyAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DutyAreaId");

                    b.ToTable("DutyArea_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmpTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CorrectIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("MatchValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RosterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestItemTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAnswer")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RosterId");

                    b.HasIndex("TestItemTypeId");

                    b.ToTable("EmpTests");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TQEqulator")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkLocation")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("ZipCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeActivityNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityNotificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityNotificationId");

                    b.HasIndex("EmployeeId", "ActivityNotificationId")
                        .IsUnique();

                    b.ToTable("EmployeeActivityNotifications");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CertificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificationNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RollOverHours")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCertifications");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeCertifictaionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DRADate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NewCertificationID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OldCertificationID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("NewCertificationID");

                    b.ToTable("EmployeeCertifictaionHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileAsBase64")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeDocuments");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsManager")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("EmployeeOrganizations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsCertificationRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSignificant")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("QualificationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Trainee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrainingProgramVersion")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Employee_Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MajorVersion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinorVersion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("EmployeeId", "TaskId", "MajorVersion")
                        .IsUnique();

                    b.ToTable("Employee_Tasks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Conditions")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Criteria")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EnablingObjective_CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnablingObjective_SubCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSkillQualification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("References")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TopicId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isMetaEO")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnablingObjective_CategoryId");

                    b.HasIndex("EnablingObjective_SubCategoryId");

                    b.HasIndex("TopicId");

                    b.ToTable("EnablingObjectives");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjectiveHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OldStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnablingObjectiveId");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.ToTable("EnablingObjectiveHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EnablingObjective_Categories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_CategoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EnablingObjectiveCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OldStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnablingObjectiveCategoryId");

                    b.ToTable("EnablingObjective_CategoryHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Employee_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EOID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EOID", "EmployeeId")
                        .IsUnique();

                    b.ToTable("EnablingObjective_Employee_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_MetaEO_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EOID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetaEOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EOID");

                    b.HasIndex("MetaEOId", "EOID")
                        .IsUnique();

                    b.ToTable("EnablingObjective_MetaEO_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnablingObjectiveId");

                    b.ToTable("EnablingObjective_Questions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentStepId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EOId");

                    b.ToTable("EnablingObjective_Steps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "Number")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("EnablingObjective_SubCategories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_SubCategoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EnablingObjectiveSubCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OldStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnablingObjectiveSubCategoryId");

                    b.ToTable("EnablingObjective_SubCategoryHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EOId");

                    b.ToTable("EnablingObjective_Suggestions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ToolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.HasIndex("EOId", "ToolId")
                        .IsUnique();

                    b.ToTable("EnablingObjective_Tools");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId", "Number")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("EnablingObjective_Topics");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_TopicHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EnablingObjectiveTopicId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OldStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnablingObjectiveTopicId");

                    b.ToTable("EnablingObjective_TopicHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EvaluationMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EvaluationMethods");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EvaluationReleaseEMPSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("EvaluationAvailableOnEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EvaluationAvailableOnStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EvaluationDueDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EvaluationRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EvaluationUsedToDeployStudentEvaluation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FinalGradeRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReleaseAfterEndTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReleaseAfterGradeAssigned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReleaseOnSpecificTimeAfterClassEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReleasePrior")
                        .HasColumnType("INTEGER");

                    b.Property<string>("jobDetails")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ILAId")
                        .IsUnique();

                    b.ToTable("EvaluationReleaseEMPSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.IDP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Grade")
                        .HasColumnType("TEXT");

                    b.Property<string>("GradeUpdateReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("IDPYear")
                        .HasColumnType("TEXT");

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Score")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("completionDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("taskQualificationCompleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ILAId");

                    b.ToTable("IDPs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.IDPSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IDPId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("plannedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassScheduleId");

                    b.HasIndex("IDPId");

                    b.ToTable("IDPSchedules");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.IDP_Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IDP_ReviewStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Instructions")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IDP_ReviewStatusId");

                    b.ToTable("IDP_Review");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.IDP_ReviewStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IDP_ReviewStatuses");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CBTRequiredForCourse")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int?>("DeliveryMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("HasPilotData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOptional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsProgramManual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSelfPaced")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherAssesmentTool")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherNercTargetAudience")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProviderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TopicId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrainingEvalMethods")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrainingPlan")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseForEMP")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("TopicId");

                    b.ToTable("ILAs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILACertificationLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CertificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEmergencyOpHours")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsIncludeSimulation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPartialCreditHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalHours")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.HasIndex("ILAId");

                    b.ToTable("ILACertificationLinks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILACertificationSubRequirementLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CertificationSubRequirementId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILACertificationLinkId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReqHour")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CertificationSubRequirementId");

                    b.HasIndex("ILACertificationLinkId");

                    b.ToTable("ILACertificationSubRequirementLinks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILACollaborator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CollaboratorInviteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorInviteId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ILAId", "CollaboratorInviteId")
                        .IsUnique();

                    b.ToTable("ILACollaborators");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILACustomObjective_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomObjId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomObjId");

                    b.HasIndex("ILAId", "CustomObjId")
                        .IsUnique();

                    b.ToTable("ILACustomObjective_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILAHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OldStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ILAId");

                    b.ToTable("ILAHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILATraineeEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EvaluationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestInstruction")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestTimeLimitHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestTimeLimitMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestTitle")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrainingEvaluationMethod")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationTypeId");

                    b.HasIndex("ILAId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("ILATraineeEvaluations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_AssessmentTool_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssessmentToolId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentToolId");

                    b.HasIndex("ILAId", "AssessmentToolId")
                        .IsUnique();

                    b.ToTable("ILA_AssessmentTool_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_EnablingObjective_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnablingObjectiveId");

                    b.HasIndex("ILAId", "EnablingObjectiveId")
                        .IsUnique();

                    b.ToTable("ILA_EnablingObjective_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Evaluator_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("ILAId");

                    b.ToTable("ILA_Evaluator_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_NERCAudience_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NERCAudienceID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NERCAudienceID");

                    b.HasIndex("ILAId", "NERCAudienceID")
                        .IsUnique();

                    b.ToTable("ILA_NERCAudience_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_NercStandard_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<float>("CreditHoursByStd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(0f);

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NERCStdMemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StdId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NERCStdMemberId");

                    b.HasIndex("StdId");

                    b.HasIndex("ILAId", "StdId", "NERCStdMemberId")
                        .IsUnique();

                    b.ToTable("ILA_NercStandard_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_PerformTraineeEval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ILAId")
                        .IsUnique();

                    b.ToTable("ILA_PerformTraineeEvals");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Position_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("ILAId", "PositionId")
                        .IsUnique();

                    b.ToTable("ILA_Position_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_PreRequisite_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PreRequisiteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PreRequisiteId");

                    b.HasIndex("ILAId", "PreRequisiteId")
                        .IsUnique();

                    b.ToTable("ILA_PreRequisite_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Procedure_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("ILAId", "ProcedureId")
                        .IsUnique();

                    b.ToTable("ILA_Procedure_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_RegRequirement_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RegulatoryRequirementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegulatoryRequirementId");

                    b.HasIndex("ILAId", "RegulatoryRequirementId")
                        .IsUnique();

                    b.ToTable("ILA_RegRequirement_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_SafetyHazard_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SafetyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SafetyHazardId");

                    b.HasIndex("ILAId", "SafetyHazardId")
                        .IsUnique();

                    b.ToTable("ILA_SafetyHazard_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Segment_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SegmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.HasIndex("ILAId", "SegmentId")
                        .IsUnique();

                    b.ToTable("ILA_Segment_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_StudentEvaluation_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StudentEvaluationAudienceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentEvaluationAvailabilityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentEvaluationFormId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("isAllQuestionMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("studentEvalAudienceID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("studentEvalAvailabilityID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("studentEvalFormID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ILAId");

                    b.HasIndex("StudentEvaluationAudienceId");

                    b.HasIndex("StudentEvaluationAvailabilityId");

                    b.HasIndex("StudentEvaluationFormId");

                    b.HasIndex("studentEvalFormID");

                    b.ToTable("ILA_StudentEvaluation_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_TaskObjective_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseForTQ")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("ILAId", "TaskId")
                        .IsUnique();

                    b.ToTable("ILA_TaskObjective_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPriority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ILA_Topics");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_TrainingTopic_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrTopicId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrTopicId");

                    b.HasIndex("ILAId", "TrTopicId")
                        .IsUnique();

                    b.ToTable("ILA_TrainingTopic_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Upload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("FileAsBase64")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ILAId");

                    b.ToTable("ILA_Uploads");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ICategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InstructorDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstructorEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstructorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("InstructorNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsWorkBookAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ICategoryId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Instructor_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ICategoryDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ICategoryTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ICategoryUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("IEffectiveDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Instructor_Categories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Instructor_CategoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EffectiveDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ICategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ICategoryNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ICategoryId");

                    b.ToTable("Instructor_CategoryHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Instructor_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EffectiveDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InstructorNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Instructor_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocAddress")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocCategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocCity")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("LocNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LocPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocState")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocZipCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocCategoryID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Location_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocCategoryDesc")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocCategoryTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("LocCategoryWebsite")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Location_Categories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Location_CategoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EffectiveDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LocCategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocCategoryID");

                    b.ToTable("Location_CategoryHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Location_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EffectiveDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Location_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.MetaILA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MetaILAAssessmentID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetaILAStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetaILAAssessmentID");

                    b.HasIndex("MetaILAStatusId");

                    b.ToTable("MetaILAs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.MetaILAAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MetaILAAssessments");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.MetaILAConfigurationPublishOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MetaILAConfigurationPublishOptions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.MetaILA_Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MetaILA_Statuses");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Meta_ILAMembers_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetaILAConfigPublishOptionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetaILAID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MetaILAConfigPublishOptionID");

                    b.HasIndex("MetaILAID");

                    b.HasIndex("ILAID", "MetaILAID", "MetaILAConfigPublishOptionID")
                        .IsUnique();

                    b.ToTable("Meta_ILAMembers_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.NERCTargetAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOther")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NERCTargetAudiences");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.NercStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNercStandard")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUserDefined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NercStandards");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.NercStandardMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("StdId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StdId");

                    b.ToTable("NercStandardMembers");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HyperLink")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionAbbreviation")
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PositionsFileUpload")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Position_Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Trainee")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("Position_Employees");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Position_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ChangeEffectiveDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Position_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Position_Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("TaskId");

                    b.ToTable("Position_Tasks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Positions_SQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EOId");

                    b.HasIndex("PositionId");

                    b.ToTable("Positions_SQs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Proc_IssuingAuthority_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OldStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProcedureIssuingAuthorityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureIssuingAuthorityId");

                    b.ToTable("Proc_IssuingAuthority_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hyperlink")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IssuingAuthorityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProceduresFileUpload")
                        .HasColumnType("BLOB");

                    b.Property<string>("RevisionNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IssuingAuthorityId", "Number")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ProcedureReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEmployeeShowResponses")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProcedureReviewInstructions")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcedureReviewTitle")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.ToTable("ProcedureReviews");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ProcedureReview_Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsStarted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcedureReviewId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProcedureReviewResponse")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProcedureReviewId");

                    b.ToTable("ProcedureReview_Employees");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_EnablingObjective_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("EnablingObjectiveId", "ProcedureId")
                        .IsUnique();

                    b.ToTable("Procedure_EnablingObjective_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_ILA_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("ILAId", "ProcedureId")
                        .IsUnique();

                    b.ToTable("Procedure_ILA_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_IssuingAuthority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Procedure_IssuingAuthorities");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_RR_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegulatoryRequirementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("RegulatoryRequirementId", "ProcedureId")
                        .IsUnique();

                    b.ToTable("Procedure_RR_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_SaftyHazard_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaftyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("SaftyHazardId", "ProcedureId")
                        .IsUnique();

                    b.ToTable("Procedure_SaftyHazard_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_StatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OldStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.ToTable("Procedure_StatusHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_Task_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("ProcedureId", "TaskId")
                        .IsUnique();

                    b.ToTable("Procedure_Task_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyWebsite")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ContactExt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactMobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNERC")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProviderLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RepEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("RepName")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RepPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("RepSignature")
                        .HasColumnType("TEXT");

                    b.Property<string>("RepTitle")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProviderLevelId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ProviderLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProviderLevels");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.QTDUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("QTDUsers");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.QuestionBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Stem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("QuestionBanks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.QuestionBankHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionBankNotes")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("QuestionBankHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RR_IssuingAuthority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RR_IssuingAuthorities");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RR_IssuingAuthority_StatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OldStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RRIssuingAuthorityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RRIssuingAuthorityId");

                    b.ToTable("RR_IssuingAuthority_StatusHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RR_StatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OldStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegulatoryRequirementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegulatoryRequirementId");

                    b.ToTable("RR_StatusHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RR_Task_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RegRequirementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("RegRequirementId", "TaskId")
                        .IsUnique();

                    b.ToTable("RR_Task_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RatingScale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position1Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position2Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position3Text")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position4Text")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position5Text")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RatingScales");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RatingScaleExpanded", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingScaleNId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ratings")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RatingScaleNId");

                    b.ToTable("RatingScaleExpanded");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RatingScaleN", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RatingScaleDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RatingScaleNs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RegRequirement_EO_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EOID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RegulatoryRequirementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegulatoryRequirementId");

                    b.HasIndex("EOID", "RegulatoryRequirementId")
                        .IsUnique();

                    b.ToTable("RegRequirement_EO_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RegRequirement_ILA_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RegulatoryRequirementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegulatoryRequirementId");

                    b.HasIndex("ILAID", "RegulatoryRequirementId")
                        .IsUnique();

                    b.ToTable("RegRequirement_ILA_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RegulatoryRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HyperLink")
                        .HasColumnType("TEXT");

                    b.Property<int>("IssuingAuthorityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RevisionNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Uploads")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("IssuingAuthorityId");

                    b.ToTable("RegulatoryRequirements");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("InternalReportTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialReportTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportSkeletonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ReportDisplayColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("Display")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportDisplayColumns");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ReportFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportFilters");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ReportSkeleton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ReportSkeletons");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ReportSkeletonColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportSkeletonId")
                        .HasMaxLength(200)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReportSkeletonId");

                    b.ToTable("ReportSkeletonColumns");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ReportSkeletonFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("FilterOption")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MaxOption")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MinOption")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportSkeletonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReportSkeletonId");

                    b.ToTable("ReportSkeletonFilters");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_CategoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OldStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SafetyHazardCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SafetyHazardCategoryId");

                    b.ToTable("SafetyHazard_CategoryHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_EO_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EOID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SafetyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EOID");

                    b.HasIndex("SafetyHazardId", "EOID")
                        .IsUnique();

                    b.ToTable("SafetyHazard_EO_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OldStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SafetyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SafetyHazardId");

                    b.ToTable("SafetyHazard_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_ILA_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SafetyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SafetyHazardId");

                    b.HasIndex("ILAId", "SafetyHazardId")
                        .IsUnique();

                    b.ToTable("SafetyHazard_ILA_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SafetyHzAbatementFiles")
                        .HasColumnType("TEXT");

                    b.Property<string>("SafetyHzAbatementImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("SafetyHzAbatementText")
                        .HasColumnType("TEXT");

                    b.Property<string>("SafetyHzControlsFiles")
                        .HasColumnType("TEXT");

                    b.Property<string>("SafetyHzControlsImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("SafetyHzControlsText")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SafetyHazard_Sets");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_Set_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SafetyHazardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SafetyHazardSetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SafetyHazardId");

                    b.HasIndex("SafetyHazardSetId", "SafetyHazardId")
                        .IsUnique();

                    b.ToTable("SafetyHazard_Set_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_Task_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SaftyHazardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SaftyHazardId");

                    b.HasIndex("TaskId", "SaftyHazardId")
                        .IsUnique();

                    b.ToTable("SafetyHazard_Task_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_Tool_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SafetyHazardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SafetyHazardId");

                    b.HasIndex("ToolId");

                    b.ToTable("SafetyHazard_Tool_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SaftyHazard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Files")
                        .HasColumnType("TEXT");

                    b.Property<string>("HyperLinks")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RevisionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("SaftyHazardCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SaftyHazardCategoryId");

                    b.ToTable("SaftyHazards");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SaftyHazard_Abatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaftyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SaftyHazardId", "Number")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("SaftyHazard_Abatements");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SaftyHazard_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SaftyHazard_Categories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SaftyHazard_Control", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaftyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SaftyHazardId", "Number")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("SaftyHazard_Controls");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SaftyHazard_RR_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RegulatoryRequirementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SafetyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegulatoryRequirementId");

                    b.HasIndex("SafetyHazardId", "RegulatoryRequirementId")
                        .IsUnique();

                    b.ToTable("SaftyHazard_RR_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNercOperatingTopics")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNercSimulation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNercStandard")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Uploads")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SegmentObjective_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int?>("EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SegmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnablingObjectiveId");

                    b.HasIndex("SegmentId");

                    b.HasIndex("TaskId");

                    b.ToTable("SegmentObjective_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SelfRegistrationOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AcknowledgeRegDisclaimer")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClassSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CloseRegOnStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnableWaitlist")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LimitForLinkedPositions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MakeAvailableForSelfReg")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegDisclaimer")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequireAdminApproval")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ILAId")
                        .IsUnique();

                    b.ToTable("SelfRegistrationOptions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulationScenarioSpecLookUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SimScenarioSpecHeading")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SimulationScenarioSpecLookUps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SimScenarioDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SimScenarioDiffID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SimScenarioDurationHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("SimScenarioDurationMins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("SimScenarioTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("SimScenarioUpload")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("SimScenarioDiffID");

                    b.ToTable("SimulatorScenarios");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenarioDifficultyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SimulatorScenarioDiffLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SimulatorScenarioDifficultyLevels");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenarioILA_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SimulatorScenarioID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SimulatorScenarioID");

                    b.HasIndex("ILAID", "SimulatorScenarioID")
                        .IsUnique();

                    b.ToTable("SimulatorScenarioILA_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenarioPositon_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SimulatorScenarioID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SimulatorScenarioID");

                    b.HasIndex("PositionID", "SimulatorScenarioID")
                        .IsUnique();

                    b.ToTable("SimulatorScenarioPositon_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenarioTaskObjectives_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SimulatorScenarioID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SimulatorScenarioID");

                    b.HasIndex("TaskID", "SimulatorScenarioID")
                        .IsUnique();

                    b.ToTable("SimulatorScenarioTaskObjectives_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenario_EnablingObjectives_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EnablingObjectiveID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SimulatorScenarioID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SimulatorScenarioID");

                    b.HasIndex("EnablingObjectiveID", "SimulatorScenarioID")
                        .IsUnique();

                    b.ToTable("SimulatorScenario_EnablingObjectives_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Instructions")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsAllowNAOption")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsAvailableForAllILAs")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsAvailableForSelectedILAs")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsIncludeCommentSections")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingScaleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RatingScaleId");

                    b.ToTable("StudentEvaluations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StudentEvaluationAudiences");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StudentEvaluationAvailabilities");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IncludeComments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAvailableForAllILAs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNAOption")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingScaleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RatingScaleId");

                    b.ToTable("StudentEvaluationForms");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentEvaluationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentEvaluationNotes")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudentEvaluationId");

                    b.ToTable("StudentEvaluationHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EvalFormID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("QuestionFiles")
                        .HasColumnType("BLOB");

                    b.Property<string>("QuestionImage")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EvalFormID");

                    b.ToTable("StudentEvaluationQuestions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationWithoutEmp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalComments")
                        .HasColumnType("TEXT");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<int>("ClassScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataMode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("High")
                        .HasColumnType("REAL");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Low")
                        .HasColumnType("REAL");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RatingScale")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentEvaluationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentEvaluationQuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassScheduleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentEvaluationId");

                    b.HasIndex("StudentEvaluationQuestionId");

                    b.ToTable("StudentEvaluationWithoutEmp");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluation_Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentEvaluationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionBankId");

                    b.HasIndex("StudentEvaluationId");

                    b.ToTable("StudentEvaluation_Questions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SubDutyArea_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubDutyAreaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubDutyAreaId");

                    b.ToTable("SubDutyArea_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SubdutyArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("DutyAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReasonForRevision")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DutyAreaId");

                    b.ToTable("SubdutyAreas");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TQEmpSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MultipleSignOff")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReleaseInSpecificOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReleaseOnReleaseDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReleaseToAllSingleSignOff")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowTaskQuestions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowTaskSuggestions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskQualificationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskQualificationId")
                        .IsUnique();

                    b.ToTable("TQEmpSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TQILAEmpSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MultipleSignOffRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OneSignOffRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PriorToSpecificTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReleaseAtOnce")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReleaseOnClassEnd")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReleaseOnClassStart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReleaseOneAtTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SpecificTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TQDueDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TQRequired")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ILAId");

                    b.ToTable("TQILAEmpSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abreviation")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Conditions")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Criteria")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Critical")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMeta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReliability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("References")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RequalificationDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequalificationNotes")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("RequalificationRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubdutyAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskCriteriaUpload")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubdutyAreaId", "Number")
                        .IsUnique();

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CriteriaMet")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmpId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EvaluationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EvaluatorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReleasedToEMP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TQStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TaskQualificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskQualificationEvaluator")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("TQStatusId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskQualifications");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskQualificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TaskQualificationStatuses");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskQualification_Evaluator_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskQualificationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("TaskQualificationId");

                    b.ToTable("TaskQualification_Evaluator_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskReQualificationEmp_QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskQualificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TraineeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskQualificationId");

                    b.HasIndex("TaskQuestionId");

                    b.HasIndex("TraineeId");

                    b.ToTable("TaskReQualificationEmp_QuestionAnswers");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskReQualificationEmp_SignOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int?>("EvaluationMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsCriteriaMet")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsStarted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SignOffDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TaskQualificationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskQualificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TraineeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationMethodId");

                    b.HasIndex("TaskQualificationId");

                    b.HasIndex("TraineeId");

                    b.ToTable("TaskReQualificationEmp_SignOffs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskReQualificationEmp_Steps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskQualificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskStepId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TraineeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskQualificationId");

                    b.HasIndex("TaskStepId");

                    b.HasIndex("TraineeId");

                    b.ToTable("TaskReQualificationEmp_Steps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskReQualificationEmp_Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskQualificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskSuggestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TraineeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskQualificationId");

                    b.HasIndex("TaskSuggestionId");

                    b.HasIndex("TraineeId");

                    b.ToTable("TaskReQualificationEmp_Suggestions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_CollaboratorInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("InviteDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvitedByEId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvitedForTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InviteeEId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InviteeEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Task_CollaboratorInvitations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Collaborator_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskCollabInviteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isTaskCreator")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskCollabInviteId", "TaskId")
                        .IsUnique();

                    b.ToTable("Task_Collaborator_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_EnablingObjective_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("EnablingObjectiveId", "TaskId")
                        .IsUnique();

                    b.ToTable("Task_EnablingObjective_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("OldStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("Version_TaskId");

                    b.ToTable("Task_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_ILA_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("ILAId", "TaskId")
                        .IsUnique();

                    b.ToTable("Task_ILA_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_MetaTask_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("Meta_TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("Meta_TaskId", "TaskId")
                        .IsUnique();

                    b.ToTable("Task_MetaTask_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("TaskId");

                    b.ToTable("Task_Positions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Task_Questions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Task_References");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Reference_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskReferenceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskReferenceId", "TaskId")
                        .IsUnique();

                    b.ToTable("Task_Reference_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentStepId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Task_Steps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Task_Suggestions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.HasIndex("TaskId", "ToolId")
                        .IsUnique();

                    b.ToTable("Task_Tools");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_TrainingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TrainingGroupId", "TaskId")
                        .IsUnique();

                    b.ToTable("Task_TrainingGroups");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaxonomyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TaxonomyLevels");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RandomizeDistractors")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("TestStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestStatusId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxonomyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestItemTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EOId");

                    b.HasIndex("TaxonomyId");

                    b.HasIndex("TestItemTypeId");

                    b.ToTable("TestItems");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemFillBlank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Correct")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("CorrectIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestItemId");

                    b.ToTable("TestItemFillBlanks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemMCQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChoiceDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestItemId");

                    b.ToTable("TestItemMCQs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChoiceDescription")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<char?>("CorrectValue")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("MatchDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<char>("MatchValue")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestItemId");

                    b.ToTable("TestItemMatches");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemShortAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AcceptableResponses")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Responses")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TestItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestItemId");

                    b.ToTable("TestItemShortAnswers");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemTrueFalse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Choices")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestItemId");

                    b.ToTable("TestItemTrueFalses");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestItemTypes");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItem_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChangeNotes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("OldStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("TestItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestItemId");

                    b.ToTable("TestItem_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestReleaseEMPSetting_Retake_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RetakeTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestReleaseSettingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RetakeTestId");

                    b.HasIndex("TestReleaseSettingId");

                    b.ToTable("TestReleaseEMPSetting_Retake_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestReleaseEMPSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoReleaseRetake")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("FinalTestDueDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FinalTestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FinalTestPassingScore")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FinalTestSpecificTimePrior")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MakeAvailableBeforeDays")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MakeFinalTestAvailableAfterCBTCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MakeFinalTestAvailableImmediatelyAfterStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MakeFinalTestAvailableOnClassEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MakeFinalTestAvailableOnSpecificTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfRetakes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PreTestAvailableOnEnrollment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PreTestAvailableOneStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PreTestId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PreTestRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreTestScore")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RetakeEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowCorrectIncorrectFinalTestAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowCorrectIncorrectPreTestAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowCorrectIncorrectRetakeTestAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowStudentSubmittedFinalTestAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowStudentSubmittedPreTestAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowStudentSubmittedRetakeTestAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsePreTestAndTest")
                        .HasColumnType("INTEGER");

                    b.Property<string>("jobDetails")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FinalTestId")
                        .IsUnique();

                    b.HasIndex("ILAId")
                        .IsUnique();

                    b.HasIndex("PreTestId")
                        .IsUnique();

                    b.ToTable("TestReleaseEMPSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOverride")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestStatuses");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Test_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Test_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Test_Item_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestItemId");

                    b.HasIndex("TestId", "TestItemId")
                        .IsUnique();

                    b.ToTable("Test_Item_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Timesheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MethodId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTaskId");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hyperlink")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("ToolCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Upload")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("ToolCategoryId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ToolCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ToolCategories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ToolGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ToolGroups");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ToolGroup_Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ToolGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ToolGroupId");

                    b.HasIndex("ToolId", "ToolGroupId")
                        .IsUnique();

                    b.ToTable("ToolGroup_Tools");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Tool_StatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ChangeEffectiveDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ToolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.ToTable("Tool_StatusHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TraineeEvaluationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TraineeEvaluationTypes");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("GroupDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HyperLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PDF")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "GroupNumber")
                        .IsUnique();

                    b.ToTable("TrainingGroups");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingGroup_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TrainingGroup_Categories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProgramTitle")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Publish")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TPVersionNo")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainingProgramTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Year")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramTypeId");

                    b.HasIndex("PositionId", "Id")
                        .IsUnique();

                    b.ToTable("TrainingPrograms");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingProgramType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrainingProgramTypeTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TrainingProgramTypes");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingProgram_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeEffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingProgramVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Version_TrainingProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.HasIndex("Version_TrainingProgramId");

                    b.ToTable("TrainingProgram_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingPrograms_ILA_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ILAId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingPrograms_ILA_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainingTopic_CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrainingTopic_CategoryId");

                    b.ToTable("TrainingTopics");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingTopic_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TrainingTopic_Categories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version_Number")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Version_Employees");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsInUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TopicId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VersionNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("isMetaEO")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnablingObjectiveId");

                    b.ToTable("Version_EnablingObjectives");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Employee_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version_Number")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Version_EmployeeId");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.ToTable("Version_EnablingObjective_Employee_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_ILALink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version_Number")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.HasIndex("Version_ILAId");

                    b.ToTable("Version_EnablingObjective_ILALinks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_MetaEOLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_MetaEOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version_Number")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.HasIndex("Version_MetaEOId");

                    b.ToTable("Version_EnablingObjective_MetaEOLinks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Position_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version_Number")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_PositionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.HasIndex("Version_PositionId");

                    b.ToTable("Version_EnablingObjective_Position_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Procedure_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_ProcedureId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.HasIndex("Version_ProcedureId");

                    b.ToTable("Version_EnablingObjective_Procedure_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("EOQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EOQuestionId");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.ToTable("Version_EnablingObjective_Questions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_RRLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version_Number")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_RegulatoryRequirementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.HasIndex("Version_RegulatoryRequirementId");

                    b.ToTable("Version_EnablingObjective_RRLinks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_SaftyHazard_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_SaftyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.HasIndex("Version_SaftyHazardId");

                    b.ToTable("Version_EnablingObjective_SaftyHazard_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EOStepId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EOStepId");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.ToTable("Version_EnablingObjective_Steps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Suggestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnablingObjective_SuugestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_EOId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnablingObjective_SuugestionId");

                    b.HasIndex("Version_EOId");

                    b.ToTable("Version_EnablingObjective_Suggestions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version_Number")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.HasIndex("Version_TaskId");

                    b.ToTable("Version_EnablingObjective_Tasks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Tool_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_ToolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.HasIndex("Version_ToolId");

                    b.ToTable("Version_EnablingObjective_Tool_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_ILA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int?>("DeliveryMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("HasPilotData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOptional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsProgramManual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSelfPaced")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherAssesmentTool")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherNercTargetAudience")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProviderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TopicId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrainingPlan")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ILAId");

                    b.ToTable("Version_ILAs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_MetaILA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("MetaILAAssessmentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetaILADesc")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MetaILAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetaILAName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("MetaILAStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetaILAAssessmentID");

                    b.HasIndex("MetaILAId");

                    b.HasIndex("MetaILAStatusId");

                    b.ToTable("Version_MetaILAs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("HyperLink")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionAbbreviation")
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PositionsFileUpload")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Version_Positions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("MajorVersion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinorVersion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProcedureNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.ToTable("Version_Procedures");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Procedure_EnablingObjective_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_ProcedureId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.HasIndex("Version_ProcedureId");

                    b.ToTable("Version_Procedure_EnablingObjective_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Procedure_SaftyHazard_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_ProcedureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_SaftyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_ProcedureId");

                    b.HasIndex("Version_SaftyHazardId");

                    b.ToTable("Version_Procedure_SaftyHazard_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Procedure_Tool_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_ProcedureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_ToolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_ProcedureId");

                    b.HasIndex("Version_ToolId");

                    b.ToTable("Version_Procedure_Tool_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_RegulatoryRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("HyperLink")
                        .HasColumnType("TEXT");

                    b.Property<int>("IssuingAuthorityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("RegulatoryRequirementId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RevisionNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Uploads")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("RegulatoryRequirementId");

                    b.ToTable("Version_RegulatoryRequirements");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_SaftyHazard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MajorVersion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinorVersion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonalProtectiveEquipment")
                        .HasColumnType("TEXT");

                    b.Property<int>("SaftyHazardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SaftyHazardId");

                    b.ToTable("Version_SaftyHazards");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_SaftyHazard_Abatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_SaftyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_SaftyHazardId");

                    b.ToTable("Version_SaftyHazard_Abatements");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_SaftyHazard_Control", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_SaftyHazardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_SaftyHazardId");

                    b.ToTable("Version_SaftyHazard_Controls");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Conditions")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Criteria")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Critical")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMeta")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReliability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("References")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RequalificationDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequalificationNotes")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("RequalificationRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Standards")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("TaskCriteriaUpload")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tools")
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Version_Tasks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_EnablingObjective_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.HasIndex("Version_TaskId");

                    b.ToTable("Version_Task_EnablingObjective_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_ILA_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_ILAId");

                    b.HasIndex("Version_TaskId");

                    b.ToTable("Version_Task_ILA_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_MetaTask_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_MetaTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_MetaTaskId");

                    b.HasIndex("Version_TaskId");

                    b.ToTable("Version_Task_MetaTask_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Position_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_PositionId");

                    b.HasIndex("Version_TaskId");

                    b.ToTable("Version_Task_Position_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Procedure_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_ProcedureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_ProcedureId");

                    b.HasIndex("Version_TaskId");

                    b.ToTable("Version_Task_Procedure_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VersionTaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskQuestionId");

                    b.HasIndex("VersionTaskId");

                    b.ToTable("Version_Task_Questions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_RR_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_RegulatoryRequirementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_TaskId");

                    b.HasIndex("Version_RegulatoryRequirementId", "Version_TaskId")
                        .IsUnique();

                    b.ToTable("Version_Task_RR_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_SaftyHazard_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_SaftyHazardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_SaftyHazardId");

                    b.HasIndex("Version_TaskId");

                    b.ToTable("Version_Task_SaftyHazard_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskStepId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VersionTaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskStepId");

                    b.HasIndex("VersionTaskId");

                    b.ToTable("Version_Task_Steps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Task_SuggestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Task_SuggestionId");

                    b.HasIndex("Version_TaskId");

                    b.ToTable("Version_Task_Suggestions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Tool_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_ToolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_TaskId");

                    b.HasIndex("Version_ToolId");

                    b.ToTable("Version_Task_Tool_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_TrainingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_TrainingGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_TaskId");

                    b.HasIndex("Version_TrainingGroupId", "Version_TaskId")
                        .IsUnique();

                    b.ToTable("Version_Task_TrainingGroups");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInUse")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version_Number")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("TestStatusId");

                    b.ToTable("Version_Tests");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TestItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxonomyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TaxonomyLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestItemTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Version_EnablingObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version_Number")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaxonomyLevelId");

                    b.HasIndex("TestItemId");

                    b.HasIndex("TestItemTypeId");

                    b.HasIndex("Version_EnablingObjectiveId");

                    b.ToTable("Version_TestItems");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TestStaus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version_Number")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestStatusId");

                    b.ToTable("Version_TestStatuses");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MajorVersion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinorVersion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ToolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.ToTable("Version_Tools");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TrainingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("GroupDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HyperLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PDF")
                        .HasColumnType("BLOB");

                    b.Property<int>("Version_TrainingGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_TrainingGroupId");

                    b.ToTable("Version_TrainingGroups");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsInUse")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProgramTitle")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TPVersionNo")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingProgramTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Year")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("Version_TrainingPrograms");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TrainingProgram_ILA_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsInUse")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version_ILAId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version_TrainingProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Version_ILAId");

                    b.HasIndex("Version_TrainingProgramId");

                    b.ToTable("Version_TrainingProgram_ILA_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CBT", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("CBTs")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CBT_ScormRegistration", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule_Employee", "ClassScheduleEmployee")
                        .WithOne("ScormRegistration")
                        .HasForeignKey("QTD2.Domain.Entities.Core.CBT_ScormRegistration", "ClassScheduleEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.CBT_ScormUpload", "ScormUpload")
                        .WithMany("CBT_ScormRegistration")
                        .HasForeignKey("ScormUploadId");

                    b.Navigation("ClassScheduleEmployee");

                    b.Navigation("ScormUpload");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CBT_ScormUpload", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.CBT", "CBT")
                        .WithMany("ScormUploads")
                        .HasForeignKey("CbtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CBT");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Certification", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.CertifyingBody", "CertifyingBody")
                        .WithMany("Certifications")
                        .HasForeignKey("CertifyingBodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertifyingBody");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CertificationSubRequirement", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Certification", "Certification")
                        .WithMany("CertificationSubRequirements")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Certification_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Certification", "Certification")
                        .WithMany("Certifications_Histories")
                        .HasForeignKey("CertificationId");

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CertifyingBody_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.CertifyingBody", "CertifyingBody")
                        .WithMany("CertifyingBody_Histories")
                        .HasForeignKey("CertifyingBodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertifyingBody");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("ILAID");

                    b.HasOne("QTD2.Domain.Entities.Core.Instructor", "Instructor")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("InstructorId");

                    b.HasOne("QTD2.Domain.Entities.Core.Location", "Location")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("LocationId");

                    b.HasOne("QTD2.Domain.Entities.Core.Provider", "Provider")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("ProviderID");

                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule", null)
                        .WithMany("Recurrences")
                        .HasForeignKey("RecurrenceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ILA");

                    b.Navigation("Instructor");

                    b.Navigation("Location");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassScheduleHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule", "ClassSchedule")
                        .WithMany("ClassScheduleHistories")
                        .HasForeignKey("ClassScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchedule");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_Employee", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule_Roster_Statuses", "CBTStatus")
                        .WithMany()
                        .HasForeignKey("CBTStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule", "ClassSchedule")
                        .WithMany("ClassSchedule_Employee")
                        .HasForeignKey("ClassScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("ClassSchedule_Employee")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule_Roster_Statuses", "PreTestStatus")
                        .WithMany()
                        .HasForeignKey("PreTestStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule_Roster_Statuses", "ReTakeStatus")
                        .WithMany()
                        .HasForeignKey("RetakeStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Test", null)
                        .WithMany("ClassSchedule_Employees")
                        .HasForeignKey("TestId");

                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule_Roster_Statuses", "TestStatus")
                        .WithMany()
                        .HasForeignKey("TestStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CBTStatus");

                    b.Navigation("ClassSchedule");

                    b.Navigation("Employee");

                    b.Navigation("PreTestStatus");

                    b.Navigation("ReTakeStatus");

                    b.Navigation("TestStatus");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_Evaluation_Roster", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule", "ClassScheduleInfo")
                        .WithMany("ClassSchedule_Evaluation_Rosters")
                        .HasForeignKey("ClassScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("ClassSchedule_Evaluation_Rosters")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.StudentEvaluation", "StudentEvaluationInfo")
                        .WithMany("ClassSchedule_Evaluation_Rosters")
                        .HasForeignKey("StudentEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassScheduleInfo");

                    b.Navigation("Employee");

                    b.Navigation("StudentEvaluationInfo");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_Recurrence", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule", "ClassSchedule")
                        .WithOne("ClassSchedule_Recurrence")
                        .HasForeignKey("QTD2.Domain.Entities.Core.ClassSchedule_Recurrence", "ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchedule");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_Roster", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule", "ClassSchedule")
                        .WithMany("ClassSchedule_Rosters")
                        .HasForeignKey("ClassScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("ClassSchedule_Rosters")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Test", "Test")
                        .WithMany("ClassSchedule_Rosters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TestType", "TestType")
                        .WithMany("ClassSchedule_Rosters")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchedule");

                    b.Navigation("Employee");

                    b.Navigation("Test");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_StudentEvaluations_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule", "ClassSchedule")
                        .WithMany("ClassSchedule_StudentEvaluations_Links")
                        .HasForeignKey("ClassScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.StudentEvaluation", "StudentEvaluation")
                        .WithMany("ClassSchedule_StudentEvaluations_Links")
                        .HasForeignKey("StudentEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchedule");

                    b.Navigation("StudentEvaluation");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_AvailableCustomSetting", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClientSettings_Notification", null)
                        .WithMany("AvailableCustomSettings")
                        .HasForeignKey("ClientSettingsNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_CustomSetting", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClientSettings_Notification", null)
                        .WithMany("CustomSettings")
                        .HasForeignKey("ClientSettingsNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClientSettings_Notification", null)
                        .WithMany("Steps")
                        .HasForeignKey("ClientSettingsNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step_AvailableCustomSetting", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step", null)
                        .WithMany("AvailableCustomSettings")
                        .HasForeignKey("ClientSettingsNotificationStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step_CustomSetting", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step", null)
                        .WithMany("CustomSettings")
                        .HasForeignKey("ClientSettingsNotificationStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step_ModelItem", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step", null)
                        .WithMany("Model")
                        .HasForeignKey("ClientSettingsNotificationStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step_Recipient", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step", null)
                        .WithMany("Recipients")
                        .HasForeignKey("ClientSettingsNotificationStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientUser", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Person", "Person")
                        .WithOne("ClientUser")
                        .HasForeignKey("QTD2.Domain.Entities.Core.ClientUser", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientUserSettings_DashboardSetting", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClientUser", "ClientUser")
                        .WithMany()
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.DashboardSetting", "DashboardSetting")
                        .WithMany()
                        .HasForeignKey("DashboardSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientUser");

                    b.Navigation("DashboardSetting");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CollaboratorInvitation", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "InvitedByEmployee")
                        .WithMany()
                        .HasForeignKey("InvitedByEID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "InviteeEmployee")
                        .WithMany("CollaboratorInvitations")
                        .HasForeignKey("InviteeEID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedByEmployee");

                    b.Navigation("InviteeEmployee");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CustomEnablingObjective", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_Category", "EnablingObjective_Category")
                        .WithMany("CustomEnablingObjectives")
                        .HasForeignKey("EO_CatId");

                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_SubCategory", "EnablingObjective_SubCategory")
                        .WithMany("CustomEnablingObjectives")
                        .HasForeignKey("EO_SubCatId");

                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_Topic", "EnablingObjective_Topic")
                        .WithMany("CustomEnablingObjectives")
                        .HasForeignKey("EO_TopicId");

                    b.Navigation("EnablingObjective_Category");

                    b.Navigation("EnablingObjective_SubCategory");

                    b.Navigation("EnablingObjective_Topic");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.DiscussionQuestion", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILATraineeEvaluation", "ILATraineeEvaluation")
                        .WithMany("DiscussionQuestions")
                        .HasForeignKey("ILATraineeEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILATraineeEvaluation");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.DutyArea_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.DutyArea", "DutyArea")
                        .WithMany("DutyArea_Histories")
                        .HasForeignKey("DutyAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DutyArea");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmpTest", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule_Roster", "Roster")
                        .WithMany("EmpTests")
                        .HasForeignKey("RosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TestItemType", "TestItemType")
                        .WithMany("EmpTests")
                        .HasForeignKey("TestItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roster");

                    b.Navigation("TestItemType");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Employee", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("QTD2.Domain.Entities.Core.Employee", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeActivityNotification", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ActivityNotification", "ActivityNotification")
                        .WithMany("EmployeeActivityNotifications")
                        .HasForeignKey("ActivityNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("EmployeeActivityNotifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityNotification");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeCertification", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Certification", "Certification")
                        .WithMany("EmployeeCertifications")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("EmployeeCertifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeCertifictaionHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("EmployeeCertifictaionHistorys")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Certification", "Certification")
                        .WithMany("EmployeeCertifictaionHistorys")
                        .HasForeignKey("NewCertificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeDocument", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("EmployeeDocuments")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("EmployeeHistorys")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeeOrganization", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("EmployeeOrganizations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Organization", "Organization")
                        .WithMany("EmployeeOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EmployeePosition", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Position", "Position")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Employee_Task", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("Employee_Tasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Employee_Tasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_Category", "EnablingObjective_Category")
                        .WithMany("EnablingObjectives")
                        .HasForeignKey("EnablingObjective_CategoryId");

                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_SubCategory", "EnablingObjective_SubCategory")
                        .WithMany("EnablingObjectives")
                        .HasForeignKey("EnablingObjective_SubCategoryId");

                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_Topic", "EnablingObjective_Topic")
                        .WithMany("EnablingObjectives")
                        .HasForeignKey("TopicId");

                    b.Navigation("EnablingObjective_Category");

                    b.Navigation("EnablingObjective_SubCategory");

                    b.Navigation("EnablingObjective_Topic");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjectiveHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("EnablingObjectiveHistories")
                        .HasForeignKey("EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("EnablingObjectiveHistories")
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EnablingObjective");

                    b.Navigation("Version_EnablingObjective");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_CategoryHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_Category", "EnablingObjective_Category")
                        .WithMany("EnablingObjective_CategoryHistories")
                        .HasForeignKey("EnablingObjectiveCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective_Category");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Employee_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("EnablingObjective_Employee_Links")
                        .HasForeignKey("EOID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("EnablingObjective_Employee_Links")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EnablingObjective");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_MetaEO_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany()
                        .HasForeignKey("EOID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "MetaEO")
                        .WithMany("EnablingObjective_MetaEO_Links")
                        .HasForeignKey("MetaEOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");

                    b.Navigation("MetaEO");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Question", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("EnablingObjective_Questions")
                        .HasForeignKey("EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Step", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("EnablingObjective_Steps")
                        .HasForeignKey("EOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_SubCategory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_Category", "EnablingObjectives_Category")
                        .WithMany("EnablingObjective_SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjectives_Category");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_SubCategoryHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_SubCategory", "EnablingObjective_SubCategory")
                        .WithMany("EnablingObjective_SubCategoryHistories")
                        .HasForeignKey("EnablingObjectiveSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective_SubCategory");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Suggestion", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("EnablingObjective_Suggestions")
                        .HasForeignKey("EOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Tool", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("EnablingObjective_Tools")
                        .HasForeignKey("EOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Tool", "Tool")
                        .WithMany("EnablingObjective_Tools")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Topic", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_SubCategory", "EnablingObjectives_SubCategory")
                        .WithMany("EnablingObjective_Topics")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjectives_SubCategory");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_TopicHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_Topic", "EnablingObjective_Topic")
                        .WithMany("EnablingObjective_TopicHistories")
                        .HasForeignKey("EnablingObjectiveTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective_Topic");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EvaluationReleaseEMPSettings", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithOne("EvaluationReleaseEMPSetting")
                        .HasForeignKey("QTD2.Domain.Entities.Core.EvaluationReleaseEMPSettings", "ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.IDP", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("IDPs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("IDPs")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.IDPSchedule", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule", "ClassSchedule")
                        .WithMany("IDPSchedules")
                        .HasForeignKey("ClassScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.IDP", "IDP")
                        .WithMany("IDPSchedules")
                        .HasForeignKey("IDPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchedule");

                    b.Navigation("IDP");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.IDP_Review", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("IDP_Reviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.IDP_ReviewStatus", "IDP_ReviewStatus")
                        .WithMany("IDP_Reviews")
                        .HasForeignKey("IDP_ReviewStatusId");

                    b.Navigation("Employee");

                    b.Navigation("IDP_ReviewStatus");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.DeliveryMethod", "DeliveryMethod")
                        .WithMany("ILAs")
                        .HasForeignKey("DeliveryMethodId");

                    b.HasOne("QTD2.Domain.Entities.Core.Provider", "Provider")
                        .WithMany("ILAs")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ILA_Topic", "ILA_Topic")
                        .WithMany("ILAs")
                        .HasForeignKey("TopicId");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("ILA_Topic");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILACertificationLink", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Certification", "Certification")
                        .WithMany("ILACertificationLinks")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILACertificationLinks")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILACertificationSubRequirementLink", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.CertificationSubRequirement", "CertificationSubRequirement")
                        .WithMany("ILACertificationSubRequirementLinks")
                        .HasForeignKey("CertificationSubRequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ILACertificationLink", "CertificationLink")
                        .WithMany("ILACertificationSubRequirementLink")
                        .HasForeignKey("ILACertificationLinkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CertificationLink");

                    b.Navigation("CertificationSubRequirement");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILACollaborator", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.CollaboratorInvitation", "CollaboratorInvitation")
                        .WithMany("ILACollaborators")
                        .HasForeignKey("CollaboratorInviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", null)
                        .WithMany("ILACollaborators")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILACollaborators")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CollaboratorInvitation");

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILACustomObjective_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.CustomEnablingObjective", "CustomEnablingObjective")
                        .WithMany("ILACustomObjective_Links")
                        .HasForeignKey("CustomObjId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILACustomObjective_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomEnablingObjective");

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILAHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILAHistories")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILATraineeEvaluation", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TraineeEvaluationType", "TraineeEvaluationType")
                        .WithMany("ILATraineeEvaluations")
                        .HasForeignKey("EvaluationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILATraineeEvaluations")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Test", "Test")
                        .WithMany("ILATraineeEvaluations")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TestType", "TestType")
                        .WithMany("ILATraineeEvaluations")
                        .HasForeignKey("TestTypeId");

                    b.Navigation("ILA");

                    b.Navigation("Test");

                    b.Navigation("TestType");

                    b.Navigation("TraineeEvaluationType");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_AssessmentTool_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.AssessmentTool", "AssessmentTool")
                        .WithMany("ILA_AssessmentTool_Links")
                        .HasForeignKey("AssessmentToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_AssessmentTool_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentTool");

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_EnablingObjective_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("ILA_EnablingObjective_Links")
                        .HasForeignKey("EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_EnablingObjective_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Evaluator_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Evaluator")
                        .WithMany("ILA_Evaluator_Links")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_Evaluator_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluator");

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_NERCAudience_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_NERCAudience_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.NERCTargetAudience", "NERCTargetAudience")
                        .WithMany("ILA_NERCAudience_Links")
                        .HasForeignKey("NERCAudienceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("NERCTargetAudience");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_NercStandard_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_NercStandard_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.NercStandardMember", "NercStandardMember")
                        .WithMany("ILA_NercStandard_Links")
                        .HasForeignKey("NERCStdMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.NercStandard", "NercStandard")
                        .WithMany("ILA_NercStandard_Links")
                        .HasForeignKey("StdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("NercStandard");

                    b.Navigation("NercStandardMember");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_PerformTraineeEval", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithOne("ILA_PerformTraineeEval")
                        .HasForeignKey("QTD2.Domain.Entities.Core.ILA_PerformTraineeEval", "ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Position_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_Position_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Position", "Position")
                        .WithMany("ILA_Position_Links")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_PreRequisite_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany()
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "PreRequisite")
                        .WithMany("ILA_PreRequisite_Links")
                        .HasForeignKey("PreRequisiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("PreRequisite");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Procedure_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_Procedure_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Procedure", "Procedure")
                        .WithMany("ILA_Procedure_Links")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_RegRequirement_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_RegRequirement_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.RegulatoryRequirement", "RegulatoryRequirement")
                        .WithMany("ILA_RegRequirement_Links")
                        .HasForeignKey("RegulatoryRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("RegulatoryRequirement");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_SafetyHazard_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_SafetyHazard_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SafetyHazard")
                        .WithMany("ILA_SafetyHazard_Links")
                        .HasForeignKey("SafetyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("SafetyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Segment_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_Segment_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Segment", "Segment")
                        .WithMany("ILA_Segment_Links")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_StudentEvaluation_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_StudentEvaluation_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.StudentEvaluationAudience", "StudentEvaluationAudience")
                        .WithMany("ILA_StudentEvaluation_Links")
                        .HasForeignKey("StudentEvaluationAudienceId");

                    b.HasOne("QTD2.Domain.Entities.Core.StudentEvaluationAvailability", "StudentEvaluationAvailability")
                        .WithMany("ILA_StudentEvaluation_Links")
                        .HasForeignKey("StudentEvaluationAvailabilityId");

                    b.HasOne("QTD2.Domain.Entities.Core.StudentEvaluationForm", null)
                        .WithMany("ILA_StudentEvaluation_Links")
                        .HasForeignKey("StudentEvaluationFormId");

                    b.HasOne("QTD2.Domain.Entities.Core.StudentEvaluation", "StudentEvaluationForm")
                        .WithMany("ILA_StudentEvaluation_Links")
                        .HasForeignKey("studentEvalFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("StudentEvaluationAudience");

                    b.Navigation("StudentEvaluationAvailability");

                    b.Navigation("StudentEvaluationForm");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_TaskObjective_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_TaskObjective_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("ILA_TaskObjective_Links")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_TrainingTopic_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("ILA_TrainingTopic_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TrainingTopic", "TrainingTopic")
                        .WithMany("ILA_TrainingTopic_Links")
                        .HasForeignKey("TrTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("TrainingTopic");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Upload", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ila")
                        .WithMany("ILA_Uploads")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ila");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Instructor", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Instructor_Category", "Instructor_Category")
                        .WithMany("Instructors")
                        .HasForeignKey("ICategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor_Category");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Instructor_CategoryHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Instructor_Category", "Instructor_Category")
                        .WithMany("Instructor_CategoryHistories")
                        .HasForeignKey("ICategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor_Category");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Instructor_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Instructor", "Instructor")
                        .WithMany("Instructor_Histories")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Location", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Location_Category", "Location_Category")
                        .WithMany("Locations")
                        .HasForeignKey("LocCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location_Category");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Location_CategoryHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Location_Category", "Location_Category")
                        .WithMany("Location_CategoryHistories")
                        .HasForeignKey("LocCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location_Category");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Location_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Location", "Location")
                        .WithMany("Location_Histories")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.MetaILA", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.MetaILAAssessment", "MetaILAAssessment")
                        .WithMany("MetaILAs")
                        .HasForeignKey("MetaILAAssessmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.MetaILA_Status", "MetaILAStatus")
                        .WithMany("MetaILAs")
                        .HasForeignKey("MetaILAStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetaILAAssessment");

                    b.Navigation("MetaILAStatus");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Meta_ILAMembers_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("Meta_ILAMembers_Links")
                        .HasForeignKey("ILAID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.MetaILAConfigurationPublishOption", "MetaILAConfigurationPublishOption")
                        .WithMany("Meta_ILAMembers_Links")
                        .HasForeignKey("MetaILAConfigPublishOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.MetaILA", "MetaILA")
                        .WithMany("Meta_ILAMembers_Links")
                        .HasForeignKey("MetaILAID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("MetaILA");

                    b.Navigation("MetaILAConfigurationPublishOption");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.NercStandardMember", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.NercStandard", "NercStandard")
                        .WithMany("NercStandardMembers")
                        .HasForeignKey("StdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NercStandard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Position_Employee", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("Position_Employees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Position", "Position")
                        .WithMany("Position_Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Position_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Position", "Position")
                        .WithMany("Position_Histories")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Position_Task", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Position", "Position")
                        .WithMany("Position_Tasks")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Position_Tasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Positions_SQ", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("Position_SQs")
                        .HasForeignKey("EOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Position", "Position")
                        .WithMany("Position_SQs")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Proc_IssuingAuthority_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Procedure_IssuingAuthority", "Procedure_IssuingAuthority")
                        .WithMany("IssuingAuthorityStatusHistories")
                        .HasForeignKey("ProcedureIssuingAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure_IssuingAuthority");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Procedure_IssuingAuthority", "Procedure_IssuingAuthority")
                        .WithMany("Procedures")
                        .HasForeignKey("IssuingAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure_IssuingAuthority");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ProcedureReview", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Procedure", "Procedure")
                        .WithMany("ProcedureReviews")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ProcedureReview_Employee", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("ProcedureReview_Employee")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.ProcedureReview", "ProcedureReview")
                        .WithMany("ProcedureReview_Employee")
                        .HasForeignKey("ProcedureReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ProcedureReview");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_EnablingObjective_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("Procedure_EnablingObjective_Links")
                        .HasForeignKey("EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Procedure", "Procedure")
                        .WithMany("Procedure_EnablingObjective_Links")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_ILA_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("Procedure_ILA_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Procedure", "Procedure")
                        .WithMany("Procedure_ILA_Links")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_RR_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Procedure", "Procedure")
                        .WithMany("Procedure_RegRequirement_Links")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.RegulatoryRequirement", "RegulatoryRequirement")
                        .WithMany("Procedure_RegRequirement_Links")
                        .HasForeignKey("RegulatoryRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");

                    b.Navigation("RegulatoryRequirement");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_SaftyHazard_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Procedure", "Procedure")
                        .WithMany("Procedure_SaftyHazard_Links")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SaftyHazard")
                        .WithMany("Procedure_SaftyHazard_Links")
                        .HasForeignKey("SaftyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");

                    b.Navigation("SaftyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_StatusHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Procedure", "Procedure")
                        .WithMany("Procedure_StatusHistories")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_Task_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Procedure", "Procedure")
                        .WithMany("Procedure_Task_Links")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Procedure_Task_Links")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Provider", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ProviderLevel", "ProviderLevel")
                        .WithMany("Providers")
                        .HasForeignKey("ProviderLevelId");

                    b.Navigation("ProviderLevel");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.QTDUser", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Person", "Person")
                        .WithOne("QTDUser")
                        .HasForeignKey("QTD2.Domain.Entities.Core.QTDUser", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.QuestionBankHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.QuestionBank", "QuestionBank")
                        .WithMany("QuestionBankHistories")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RR_IssuingAuthority_StatusHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.RR_IssuingAuthority", "RR_IssuingAuthority")
                        .WithMany("RR_IssuingAuthority_StatusHistories")
                        .HasForeignKey("RRIssuingAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RR_IssuingAuthority");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RR_StatusHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.RegulatoryRequirement", "RegulatoryRequirement")
                        .WithMany("RR_StatusHistories")
                        .HasForeignKey("RegulatoryRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegulatoryRequirement");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RR_Task_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.RegulatoryRequirement", "RegulatoryRequirement")
                        .WithMany("RR_Task_Links")
                        .HasForeignKey("RegRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("RR_Task_Links")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegulatoryRequirement");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RatingScaleExpanded", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.RatingScaleN", "RatingScaleNInfo")
                        .WithMany("RatingScaleExpanded")
                        .HasForeignKey("RatingScaleNId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatingScaleNInfo");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RegRequirement_EO_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EO")
                        .WithMany("RegRequirement_EO_Links")
                        .HasForeignKey("EOID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.RegulatoryRequirement", "RegulatoryRequirement")
                        .WithMany("RegRequirement_EO_Links")
                        .HasForeignKey("RegulatoryRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EO");

                    b.Navigation("RegulatoryRequirement");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RegRequirement_ILA_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("RegRequirement_ILA_Links")
                        .HasForeignKey("ILAID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.RegulatoryRequirement", "RegulatoryRequirement")
                        .WithMany("RegRequirement_ILA_Links")
                        .HasForeignKey("RegulatoryRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("RegulatoryRequirement");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RegulatoryRequirement", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.RR_IssuingAuthority", "RR_IssuingAuthority")
                        .WithMany("RegulatoryRequirements")
                        .HasForeignKey("IssuingAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RR_IssuingAuthority");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ReportDisplayColumn", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Report", null)
                        .WithMany("DisplayColumns")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ReportFilter", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Report", null)
                        .WithMany("Filters")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ReportSkeletonColumn", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ReportSkeleton", null)
                        .WithMany("DisplayColumns")
                        .HasForeignKey("ReportSkeletonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ReportSkeletonFilter", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ReportSkeleton", null)
                        .WithMany("AvailableFilters")
                        .HasForeignKey("ReportSkeletonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_CategoryHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard_Category", "SafetyHazard_Category")
                        .WithMany("SafetyHazard_CategoryHistories")
                        .HasForeignKey("SafetyHazardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SafetyHazard_Category");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_EO_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("SafetyHazard_EO_Links")
                        .HasForeignKey("EOID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SaftyHazard")
                        .WithMany("SafetyHazard_EO_Links")
                        .HasForeignKey("SafetyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");

                    b.Navigation("SaftyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SafetyHazard")
                        .WithMany("SafetyHazard_Histories")
                        .HasForeignKey("SafetyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SafetyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_ILA_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("SafetyHazard_ILA_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SaftyHazard")
                        .WithMany("SafetyHazard_ILA_Links")
                        .HasForeignKey("SafetyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("SaftyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_Set_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SafetyHazard")
                        .WithMany("SafetyHazard_Set_Links")
                        .HasForeignKey("SafetyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.SafetyHazard_Set", "SafetyHazardSet")
                        .WithMany("SafetyHazard_Set_Links")
                        .HasForeignKey("SafetyHazardSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SafetyHazard");

                    b.Navigation("SafetyHazardSet");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_Task_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SaftyHazard")
                        .WithMany("SafetyHazard_Task_Links")
                        .HasForeignKey("SaftyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("SafetyHazard_Task_Links")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaftyHazard");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_Tool_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SaftyHazard")
                        .WithMany("SafetyHazard_Tool_Links")
                        .HasForeignKey("SafetyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Tool", "Tool")
                        .WithMany("SafetyHazard_Tool_Links")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaftyHazard");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SaftyHazard", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard_Category", "SaftyHazard_Category")
                        .WithMany("SaftyHazards")
                        .HasForeignKey("SaftyHazardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaftyHazard_Category");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SaftyHazard_Abatement", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SaftyHazard")
                        .WithMany("SaftyHazard_Abatements")
                        .HasForeignKey("SaftyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaftyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SaftyHazard_Control", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SaftyHazard")
                        .WithMany("SaftyHazard_Controls")
                        .HasForeignKey("SaftyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaftyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SaftyHazard_RR_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.RegulatoryRequirement", "RegulatoryRequirement")
                        .WithMany("SaftyHazard_RR_Links")
                        .HasForeignKey("RegulatoryRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SaftyHazard")
                        .WithMany("SaftyHazard_RR_Links")
                        .HasForeignKey("SafetyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegulatoryRequirement");

                    b.Navigation("SaftyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SegmentObjective_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("SegmentObjective_Links")
                        .HasForeignKey("EnablingObjectiveId");

                    b.HasOne("QTD2.Domain.Entities.Core.Segment", "Segment")
                        .WithMany("SegmentObjective_Links")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("SegmentObjective_Links")
                        .HasForeignKey("TaskId");

                    b.Navigation("EnablingObjective");

                    b.Navigation("Segment");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SelfRegistrationOptions", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithOne("SelfRegistrationOption")
                        .HasForeignKey("QTD2.Domain.Entities.Core.SelfRegistrationOptions", "ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenario", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SimulatorScenarioDifficultyLevel", "SimulatorScenarioDifficultyLevel")
                        .WithMany("SimulatorScenarios")
                        .HasForeignKey("SimScenarioDiffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SimulatorScenarioDifficultyLevel");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenarioILA_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("SimulatorScenarioILA_Links")
                        .HasForeignKey("ILAID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.SimulatorScenario", "SimulatorScenario")
                        .WithMany("SimulatorScenarioILA_Links")
                        .HasForeignKey("SimulatorScenarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("SimulatorScenario");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenarioPositon_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Position", "Position")
                        .WithMany("SimulatorScenarioPositon_Links")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.SimulatorScenario", "SimulatorScenario")
                        .WithMany("SimulatorScenarioPositon_Links")
                        .HasForeignKey("SimulatorScenarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("SimulatorScenario");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenarioTaskObjectives_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SimulatorScenario", "SimulatorScenario")
                        .WithMany("SimulatorScenarioTaskObjectives_Links")
                        .HasForeignKey("SimulatorScenarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("SimulatorScenarioTaskObjectives_Links")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SimulatorScenario");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenario_EnablingObjectives_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("SimulatorScenario_EnablingObjectives_Links")
                        .HasForeignKey("EnablingObjectiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.SimulatorScenario", "SimulatorScenario")
                        .WithMany("SimulatorScenario_EnablingObjectives_Links")
                        .HasForeignKey("SimulatorScenarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");

                    b.Navigation("SimulatorScenario");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluation", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.RatingScaleN", "RatingScaleN")
                        .WithMany("StudentEvaluations")
                        .HasForeignKey("RatingScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatingScaleN");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationForm", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.RatingScale", "RatingScale")
                        .WithMany("StudentEvaluationForms")
                        .HasForeignKey("RatingScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatingScale");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.StudentEvaluation", "StudentEvaluation")
                        .WithMany("StudentEvaluationHistories")
                        .HasForeignKey("StudentEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentEvaluation");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationQuestion", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.StudentEvaluationForm", "StudentEvaluationForm")
                        .WithMany("StudentEvaluationQuestions")
                        .HasForeignKey("EvalFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentEvaluationForm");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationWithoutEmp", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ClassSchedule", "ClassSchedule")
                        .WithMany("StudentEvaluationWithoutEmps")
                        .HasForeignKey("ClassScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("StudentEvaluationWithoutEmps")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("QTD2.Domain.Entities.Core.QuestionBank", "QuestionBank")
                        .WithMany("StudentEvaluationWithoutEmps")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.StudentEvaluation", "StudentEvaluation")
                        .WithMany("StudentEvaluationWithoutEmps")
                        .HasForeignKey("StudentEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.StudentEvaluationQuestion", null)
                        .WithMany("StudentEvaluationWithoutEmps")
                        .HasForeignKey("StudentEvaluationQuestionId");

                    b.Navigation("ClassSchedule");

                    b.Navigation("Employee");

                    b.Navigation("QuestionBank");

                    b.Navigation("StudentEvaluation");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluation_Question", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.QuestionBank", "QuestionBank")
                        .WithMany("StudentEvaluationQuestions")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.StudentEvaluation", "StudentEvaluation")
                        .WithMany("StudentEvaluationQuestions")
                        .HasForeignKey("StudentEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBank");

                    b.Navigation("StudentEvaluation");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SubDutyArea_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SubdutyArea", "SubDutyArea")
                        .WithMany("SubDutyArea_Histories")
                        .HasForeignKey("SubDutyAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDutyArea");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SubdutyArea", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.DutyArea", "DutyArea")
                        .WithMany("SubdutyAreas")
                        .HasForeignKey("DutyAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DutyArea");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TQEmpSetting", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TaskQualification", "TaskQualification")
                        .WithOne("TQEmpSetting")
                        .HasForeignKey("QTD2.Domain.Entities.Core.TQEmpSetting", "TaskQualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskQualification");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TQILAEmpSetting", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("TQILAEmpSettings")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SubdutyArea", "SubdutyArea")
                        .WithMany("Tasks")
                        .HasForeignKey("SubdutyAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubdutyArea");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskQualification", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("TaskQualifications")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.EvaluationMethod", "EvaluationMethod")
                        .WithMany("TaskQualifications")
                        .HasForeignKey("EvaluationId");

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId");

                    b.HasOne("QTD2.Domain.Entities.Core.TaskQualificationStatus", "TaskQualificationStatus")
                        .WithMany("TaskQualifications")
                        .HasForeignKey("TQStatusId");

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("TaskQualifications")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EvaluationMethod");

                    b.Navigation("Evaluator");

                    b.Navigation("Task");

                    b.Navigation("TaskQualificationStatus");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskQualification_Evaluator_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Evaluator")
                        .WithMany("TaskQualification_Evaluator_Links")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TaskQualification", "TaskQualification")
                        .WithMany("TaskQualification_Evaluator_Links")
                        .HasForeignKey("TaskQualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluator");

                    b.Navigation("TaskQualification");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskReQualificationEmp_QuestionAnswer", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TaskQualification", "TaskQualification")
                        .WithMany("TaskReQualificationEmp_QuestionAnswers")
                        .HasForeignKey("TaskQualificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task_Question", "Task_Question")
                        .WithMany("TaskReQualificationEmp_QuestionAnswers")
                        .HasForeignKey("TaskQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("TaskReQualificationEmp_QuestionAnswers")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Task_Question");

                    b.Navigation("TaskQualification");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskReQualificationEmp_SignOff", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EvaluationMethod", "EvaluationMethod")
                        .WithMany("TaskReQualificationEmp_SignOff")
                        .HasForeignKey("EvaluationMethodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QTD2.Domain.Entities.Core.TaskQualification", "TaskQualification")
                        .WithMany("TaskReQualificationEmp_SignOff")
                        .HasForeignKey("TaskQualificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("TaskReQualificationEmp_SignOff")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EvaluationMethod");

                    b.Navigation("TaskQualification");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskReQualificationEmp_Steps", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TaskQualification", "TaskQualification")
                        .WithMany("TaskReQualificationEmp_Steps")
                        .HasForeignKey("TaskQualificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task_Step", "Task_Step")
                        .WithMany("TaskReQualificationEmp_Steps")
                        .HasForeignKey("TaskStepId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("TaskReQualificationEmp_Steps")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Task_Step");

                    b.Navigation("TaskQualification");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskReQualificationEmp_Suggestion", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TaskQualification", "TaskQualification")
                        .WithMany("TaskReQualificationEmp_Suggestions")
                        .HasForeignKey("TaskQualificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task_Suggestion", "Task_Suggestion")
                        .WithMany("TaskReQualificationEmp_Suggestions")
                        .HasForeignKey("TaskSuggestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("TaskReQualificationEmp_Suggestions")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Task_Suggestion");

                    b.Navigation("TaskQualification");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Collaborator_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task_CollaboratorInvitation", "Task_CollaboratorInvitation")
                        .WithMany("Task_Collaborator_Links")
                        .HasForeignKey("TaskCollabInviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Task_Collaborator_Links")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Task_CollaboratorInvitation");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_EnablingObjective_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("Task_EnablingObjective_Links")
                        .HasForeignKey("EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Task_EnablingObjective_Links")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Task_Histories")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Task_Histories")
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_ILA_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("Task_ILA_Links")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Task_ILA_Links")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_MetaTask_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Meta_Task")
                        .WithMany("Task_MetaTask_Links")
                        .HasForeignKey("Meta_TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meta_Task");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Position", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Position", "Position")
                        .WithMany("Task_Positions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Task_Positions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Question", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Task_Questions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Reference_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Task_Reference_Links")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Task_Reference", "Task_Reference")
                        .WithMany("Task_Reference_Links")
                        .HasForeignKey("TaskReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Task_Reference");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Step", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Task_Steps")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Suggestion", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Task_Suggestions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Tool", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Task_Tools")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Tool", "Tool")
                        .WithMany("Task_Tools")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_TrainingGroup", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Task_TrainingGroups")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TrainingGroup", "TrainingGroup")
                        .WithMany("Task_TrainingGroups")
                        .HasForeignKey("TrainingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("TrainingGroup");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Test", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TestStatus", "TestStatus")
                        .WithMany("Tests")
                        .HasForeignKey("TestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestStatus");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItem", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("TestItems")
                        .HasForeignKey("EOId");

                    b.HasOne("QTD2.Domain.Entities.Core.TaxonomyLevel", "TaxonomyLevel")
                        .WithMany("TestItems")
                        .HasForeignKey("TaxonomyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TestItemType", "TestItemType")
                        .WithMany("TestItems")
                        .HasForeignKey("TestItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");

                    b.Navigation("TaxonomyLevel");

                    b.Navigation("TestItemType");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemFillBlank", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TestItem", "TestItem")
                        .WithMany("TestItemFillBlanks")
                        .HasForeignKey("TestItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestItem");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemMCQ", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TestItem", "TestItem")
                        .WithMany("TestItemMCQs")
                        .HasForeignKey("TestItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestItem");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemMatch", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TestItem", "TestItem")
                        .WithMany("TestItemMatches")
                        .HasForeignKey("TestItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestItem");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemShortAnswer", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TestItem", "TestItem")
                        .WithMany("TestItemShortAnswers")
                        .HasForeignKey("TestItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestItem");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemTrueFalse", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TestItem", "TestItem")
                        .WithMany("TestItemTrueFalses")
                        .HasForeignKey("TestItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestItem");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItem_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TestItem", "TestItem")
                        .WithMany("TestItem_Histories")
                        .HasForeignKey("TestItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestItem");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestReleaseEMPSetting_Retake_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Test", "RetakeTest")
                        .WithMany("TestReleaseEMPSetting_Retake_Links")
                        .HasForeignKey("RetakeTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TestReleaseEMPSettings", "TestReleaseEMPSettings")
                        .WithMany("TestReleaseEMPSetting_Retake_Links")
                        .HasForeignKey("TestReleaseSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RetakeTest");

                    b.Navigation("TestReleaseEMPSettings");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestReleaseEMPSettings", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Test", "FinalTest")
                        .WithOne()
                        .HasForeignKey("QTD2.Domain.Entities.Core.TestReleaseEMPSettings", "FinalTestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithOne("TestReleaseEMPSettings")
                        .HasForeignKey("QTD2.Domain.Entities.Core.TestReleaseEMPSettings", "ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Test", "PreTest")
                        .WithOne("TestReleaseEMPSettings")
                        .HasForeignKey("QTD2.Domain.Entities.Core.TestReleaseEMPSettings", "PreTestId");

                    b.Navigation("FinalTest");

                    b.Navigation("ILA");

                    b.Navigation("PreTest");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Test_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Test", "Test")
                        .WithMany("Test_Histories")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Test_Item_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Test", "Test")
                        .WithMany("Test_Item_Links")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TestItem", "TestItem")
                        .WithMany("Test_Item_Links")
                        .HasForeignKey("TestItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("TestItem");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Timesheet", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee_Task", "Employee_Task")
                        .WithMany("Timesheets")
                        .HasForeignKey("EmployeeTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Tool", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ToolCategory", "ToolCategory")
                        .WithMany("Tools")
                        .HasForeignKey("ToolCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToolCategory");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ToolGroup_Tool", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ToolGroup", "ToolGroup")
                        .WithMany("ToolGroup_Tools")
                        .HasForeignKey("ToolGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Tool", "Tool")
                        .WithMany("ToolGroup_Tools")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");

                    b.Navigation("ToolGroup");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Tool_StatusHistory", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Tool", "Tool")
                        .WithMany("Tool_StatusHistories")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingGroup", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TrainingGroup_Category", "TrainingGroup_Category")
                        .WithMany("TrainingGroups")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingGroup_Category");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingProgram", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Position", "Position")
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TrainingProgramType", "TrainingProgramType")
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("TrainingProgramTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("TrainingProgramType");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingProgram_History", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TrainingProgram", "TrainingProgram")
                        .WithMany("TrainingProgram_Histories")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_TrainingProgram", "Version_TrainingProgram")
                        .WithMany()
                        .HasForeignKey("Version_TrainingProgramId");

                    b.Navigation("TrainingProgram");

                    b.Navigation("Version_TrainingProgram");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingPrograms_ILA_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany()
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TrainingProgram", "TrainingProgram")
                        .WithMany("TrainingProgram_ILA_Links")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingTopic", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TrainingTopic_Category", "TrainingTopic_Category")
                        .WithMany("TrainingTopics")
                        .HasForeignKey("TrainingTopic_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingTopic_Category");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Employee", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Employee", "Employee")
                        .WithMany("Version_Employees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective", "EnablingObjective")
                        .WithMany("Version_EnablingObjectives")
                        .HasForeignKey("EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Employee_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_Employee", "Version_Employee")
                        .WithMany("Version_EnablingObjective_Employee_Links")
                        .HasForeignKey("Version_EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_EnablingObjective_Employee_Links")
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_Employee");

                    b.Navigation("Version_EnablingObjective");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_ILALink", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_EnablingObjective_ILALinks")
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_ILA", "Version_ILA")
                        .WithMany("Version_EnablingObjective_ILALinks")
                        .HasForeignKey("Version_ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_EnablingObjective");

                    b.Navigation("Version_ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_MetaEOLink", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany()
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_MetaEO")
                        .WithMany("Version_EnablingObjective_MetaEOLinks")
                        .HasForeignKey("Version_MetaEOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_EnablingObjective");

                    b.Navigation("Version_MetaEO");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Position_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_EnablingObjective_Position_Links")
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Position", "Version_Position")
                        .WithMany("Version_EnablingObjective_Position_Links")
                        .HasForeignKey("Version_PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_EnablingObjective");

                    b.Navigation("Version_Position");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Procedure_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_EnablingObjective_Procedure_Links")
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Procedure", "Version_Procedure")
                        .WithMany("Version_EnablingObjective_Procedure_Links")
                        .HasForeignKey("Version_ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_EnablingObjective");

                    b.Navigation("Version_Procedure");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Question", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_Question", "EnablingObjective_Question")
                        .WithMany("Version_EnablingObjective_Questions")
                        .HasForeignKey("EOQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", null)
                        .WithMany("Version_EnablingObjective_Questions")
                        .HasForeignKey("Version_EnablingObjectiveId");

                    b.Navigation("EnablingObjective_Question");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_RRLink", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_EnablingObjective_RRLinks")
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_RegulatoryRequirement", "Version_RegulatoryRequirement")
                        .WithMany("Version_EnablingObjective_RRLinks")
                        .HasForeignKey("Version_RegulatoryRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_EnablingObjective");

                    b.Navigation("Version_RegulatoryRequirement");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_SaftyHazard_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_EnablingObjective_SaftyHazard_Links")
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_SaftyHazard", "Version_SaftyHazard")
                        .WithMany("Version_EnablingObjective_SaftyHazard_Links")
                        .HasForeignKey("Version_SaftyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_EnablingObjective");

                    b.Navigation("Version_SaftyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Step", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_Step", "EnablingObjective_Step")
                        .WithMany("Version_EnablingObjective_Steps")
                        .HasForeignKey("EOStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", null)
                        .WithMany("Version_EnablingObjective_Steps")
                        .HasForeignKey("Version_EnablingObjectiveId");

                    b.Navigation("EnablingObjective_Step");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Suggestions", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.EnablingObjective_Suggestion", "EnablingObjective_Suggestion")
                        .WithMany("Version_EnablingObjective_Suggestions")
                        .HasForeignKey("EnablingObjective_SuugestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_EnablingObjective_Suggestions")
                        .HasForeignKey("Version_EOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnablingObjective_Suggestion");

                    b.Navigation("Version_EnablingObjective");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Task", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_EnablingObjective_Tasks")
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_EnablingObjective_Tasks")
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_EnablingObjective");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective_Tool_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_EnablingObjective_Tool_Links")
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Tool", "Version_Tool")
                        .WithMany("Version_EnablingObjective_Tool_Links")
                        .HasForeignKey("Version_ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_EnablingObjective");

                    b.Navigation("Version_Tool");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_ILA", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.ILA", "ILA")
                        .WithMany("Version_ILAs")
                        .HasForeignKey("ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ILA");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_MetaILA", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.MetaILAAssessment", "MetaILAAssessment")
                        .WithMany("Version_MetaILAs")
                        .HasForeignKey("MetaILAAssessmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.MetaILA", "MetaILA")
                        .WithMany("Version_MetaILAs")
                        .HasForeignKey("MetaILAId");

                    b.HasOne("QTD2.Domain.Entities.Core.MetaILA_Status", "MetaILA_Status")
                        .WithMany("Version_MetaILAs")
                        .HasForeignKey("MetaILAStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetaILA");

                    b.Navigation("MetaILA_Status");

                    b.Navigation("MetaILAAssessment");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Position", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Position", "Position")
                        .WithMany("Version_Positions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Procedure", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Procedure", "Procedure")
                        .WithMany("Version_Procedures")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Procedure_EnablingObjective_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_Procedure_EnablingObjective_Links")
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Procedure", "Version_Procedure")
                        .WithMany("Version_Procedure_EnablingObjective_Links")
                        .HasForeignKey("Version_ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_EnablingObjective");

                    b.Navigation("Version_Procedure");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Procedure_SaftyHazard_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_Procedure", "Version_Procedure")
                        .WithMany("Version_Procedure_SaftyHazard_Links")
                        .HasForeignKey("Version_ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_SaftyHazard", "Version_SaftyHazard")
                        .WithMany("Version_Procedure_SaftyHazard_Links")
                        .HasForeignKey("Version_SaftyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_Procedure");

                    b.Navigation("Version_SaftyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Procedure_Tool_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_Procedure", "Version_Procedure")
                        .WithMany("Version_Procedure_Tool_Links")
                        .HasForeignKey("Version_ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Tool", "Version_Tool")
                        .WithMany("Version_Procedure_Tool_Links")
                        .HasForeignKey("Version_ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_Procedure");

                    b.Navigation("Version_Tool");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_RegulatoryRequirement", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.RegulatoryRequirement", "RegulatoryRequirement")
                        .WithMany("Version_RegulatoryRequirements")
                        .HasForeignKey("RegulatoryRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegulatoryRequirement");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_SaftyHazard", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.SaftyHazard", "SaftyHazard")
                        .WithMany("Version_SaftyHazards")
                        .HasForeignKey("SaftyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaftyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_SaftyHazard_Abatement", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_SaftyHazard", "Version_SaftyHazard")
                        .WithMany("Version_SaftyHazard_Abatements")
                        .HasForeignKey("Version_SaftyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_SaftyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_SaftyHazard_Control", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_SaftyHazard", "Version_SaftyHazard")
                        .WithMany("Version_SaftyHazard_Controls")
                        .HasForeignKey("Version_SaftyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_SaftyHazard");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task", "Task")
                        .WithMany("Version_Tasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_EnablingObjective_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_Task_EnablingObjective_Links")
                        .HasForeignKey("Version_EnablingObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_Task_EnablingObjective_Links")
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_EnablingObjective");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_ILA_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_ILA", "Version_ILA")
                        .WithMany("Version_Task_ILA_Links")
                        .HasForeignKey("Version_ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_Task_ILA_Links")
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_ILA");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_MetaTask_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_MetaTask")
                        .WithMany("Version_Task_MetaTask_Links")
                        .HasForeignKey("Version_MetaTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany()
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Version_MetaTask");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Position_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_Position", "Version_Position")
                        .WithMany("Version_Task_Position_Links")
                        .HasForeignKey("Version_PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_Task_Position_Links")
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_Position");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Procedure_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_Procedure", "Version_Procedure")
                        .WithMany("Version_Task_Procedure_Links")
                        .HasForeignKey("Version_ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_Task_Procedure_Links")
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_Procedure");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Question", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task_Question", "Task_Question")
                        .WithMany("Version_Task_Questions")
                        .HasForeignKey("TaskQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_Task_Questions")
                        .HasForeignKey("VersionTaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Task_Question");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_RR_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_RegulatoryRequirement", "Version_RegulatoryRequirement")
                        .WithMany("Version_Task_RR_Links")
                        .HasForeignKey("Version_RegulatoryRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_Task_RR_Links")
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_RegulatoryRequirement");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_SaftyHazard_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_SaftyHazard", "Version_SaftyHazard")
                        .WithMany("Version_Task_SaftyHazard_Links")
                        .HasForeignKey("Version_SaftyHazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_Task_SaftyHazard_Links")
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_SaftyHazard");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Step", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task_Step", "Task_Step")
                        .WithMany("Version_Task_Steps")
                        .HasForeignKey("TaskStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_Task_Steps")
                        .HasForeignKey("VersionTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task_Step");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Suggestion", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Task_Suggestion", "Task_Suggestion")
                        .WithMany("Version_Task_Suggestions")
                        .HasForeignKey("Task_SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_Task_Suggestions")
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task_Suggestion");

                    b.Navigation("Version_Task");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_Tool_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_Task_Tool_Links")
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_Tool", "Version_Tool")
                        .WithMany("Version_Task_Tool_Links")
                        .HasForeignKey("Version_ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_Task");

                    b.Navigation("Version_Tool");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task_TrainingGroup", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_Task", "Version_Task")
                        .WithMany("Version_Task_TrainingGroups")
                        .HasForeignKey("Version_TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_TrainingGroup", "Version_TrainingGroup")
                        .WithMany("Version_Task_TrainingGroups")
                        .HasForeignKey("Version_TrainingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_Task");

                    b.Navigation("Version_TrainingGroup");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Test", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Test", "Test")
                        .WithMany("Version_Tests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TestStatus", "TestStatus")
                        .WithMany("Version_Tests")
                        .HasForeignKey("TestStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("TestStatus");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TestItems", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TaxonomyLevel", "TaxonomyLevel")
                        .WithMany("Version_TestItems")
                        .HasForeignKey("TaxonomyLevelId");

                    b.HasOne("QTD2.Domain.Entities.Core.TestItem", "TestItem")
                        .WithMany("Version_TestItems")
                        .HasForeignKey("TestItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TestItemType", "TestItemType")
                        .WithMany("Version_TestItems")
                        .HasForeignKey("TestItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_EnablingObjective", "Version_EnablingObjective")
                        .WithMany("Version_TestItems")
                        .HasForeignKey("Version_EnablingObjectiveId");

                    b.Navigation("TaxonomyLevel");

                    b.Navigation("TestItem");

                    b.Navigation("TestItemType");

                    b.Navigation("Version_EnablingObjective");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TestStaus", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TestStatus", "TestStatus")
                        .WithMany("Version_TestStauses")
                        .HasForeignKey("TestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestStatus");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Tool", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Tool", "Tool")
                        .WithMany("Version_Tools")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TrainingGroup", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.TrainingGroup", "TrainingGroup")
                        .WithMany("Version_TrainingGroups")
                        .HasForeignKey("Version_TrainingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingGroup");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TrainingProgram", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.TrainingProgram", "trainingProgram")
                        .WithMany()
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("trainingProgram");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TrainingProgram_ILA_Link", b =>
                {
                    b.HasOne("QTD2.Domain.Entities.Core.Version_ILA", "Version_ILA")
                        .WithMany("Version_TrainingProgram_ILA_Links")
                        .HasForeignKey("Version_ILAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTD2.Domain.Entities.Core.Version_TrainingProgram", "Version_TrainingProgram")
                        .WithMany("Version_TrainingProgram_ILA_Links")
                        .HasForeignKey("Version_TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version_ILA");

                    b.Navigation("Version_TrainingProgram");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ActivityNotification", b =>
                {
                    b.Navigation("EmployeeActivityNotifications");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.AssessmentTool", b =>
                {
                    b.Navigation("ILA_AssessmentTool_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CBT", b =>
                {
                    b.Navigation("ScormUploads");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CBT_ScormUpload", b =>
                {
                    b.Navigation("CBT_ScormRegistration");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Certification", b =>
                {
                    b.Navigation("Certifications_Histories");

                    b.Navigation("CertificationSubRequirements");

                    b.Navigation("EmployeeCertifications");

                    b.Navigation("EmployeeCertifictaionHistorys");

                    b.Navigation("ILACertificationLinks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CertificationSubRequirement", b =>
                {
                    b.Navigation("ILACertificationSubRequirementLinks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CertifyingBody", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("CertifyingBody_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule", b =>
                {
                    b.Navigation("ClassSchedule_Employee");

                    b.Navigation("ClassSchedule_Evaluation_Rosters");

                    b.Navigation("ClassSchedule_Recurrence");

                    b.Navigation("ClassSchedule_Rosters");

                    b.Navigation("ClassSchedule_StudentEvaluations_Links");

                    b.Navigation("ClassScheduleHistories");

                    b.Navigation("IDPSchedules");

                    b.Navigation("Recurrences");

                    b.Navigation("StudentEvaluationWithoutEmps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_Employee", b =>
                {
                    b.Navigation("ScormRegistration");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClassSchedule_Roster", b =>
                {
                    b.Navigation("EmpTests");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification", b =>
                {
                    b.Navigation("AvailableCustomSettings");

                    b.Navigation("CustomSettings");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ClientSettings_Notification_Step", b =>
                {
                    b.Navigation("AvailableCustomSettings");

                    b.Navigation("CustomSettings");

                    b.Navigation("Model");

                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CollaboratorInvitation", b =>
                {
                    b.Navigation("ILACollaborators");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.CustomEnablingObjective", b =>
                {
                    b.Navigation("ILACustomObjective_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.DeliveryMethod", b =>
                {
                    b.Navigation("ILAs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.DutyArea", b =>
                {
                    b.Navigation("DutyArea_Histories");

                    b.Navigation("SubdutyAreas");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Employee", b =>
                {
                    b.Navigation("ClassSchedule_Employee");

                    b.Navigation("ClassSchedule_Evaluation_Rosters");

                    b.Navigation("ClassSchedule_Rosters");

                    b.Navigation("CollaboratorInvitations");

                    b.Navigation("Employee_Tasks");

                    b.Navigation("EmployeeActivityNotifications");

                    b.Navigation("EmployeeCertifications");

                    b.Navigation("EmployeeCertifictaionHistorys");

                    b.Navigation("EmployeeDocuments");

                    b.Navigation("EmployeeHistorys");

                    b.Navigation("EmployeeOrganizations");

                    b.Navigation("EmployeePositions");

                    b.Navigation("EnablingObjective_Employee_Links");

                    b.Navigation("IDP_Reviews");

                    b.Navigation("IDPs");

                    b.Navigation("ILA_Evaluator_Links");

                    b.Navigation("ILACollaborators");

                    b.Navigation("Position_Employees");

                    b.Navigation("ProcedureReview_Employee");

                    b.Navigation("StudentEvaluationWithoutEmps");

                    b.Navigation("TaskQualification_Evaluator_Links");

                    b.Navigation("TaskQualifications");

                    b.Navigation("TaskReQualificationEmp_QuestionAnswers");

                    b.Navigation("TaskReQualificationEmp_SignOff");

                    b.Navigation("TaskReQualificationEmp_Steps");

                    b.Navigation("TaskReQualificationEmp_Suggestions");

                    b.Navigation("Version_Employees");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Employee_Task", b =>
                {
                    b.Navigation("Timesheets");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective", b =>
                {
                    b.Navigation("EnablingObjective_Employee_Links");

                    b.Navigation("EnablingObjective_MetaEO_Links");

                    b.Navigation("EnablingObjective_Questions");

                    b.Navigation("EnablingObjective_Steps");

                    b.Navigation("EnablingObjective_Suggestions");

                    b.Navigation("EnablingObjective_Tools");

                    b.Navigation("EnablingObjectiveHistories");

                    b.Navigation("ILA_EnablingObjective_Links");

                    b.Navigation("Position_SQs");

                    b.Navigation("Procedure_EnablingObjective_Links");

                    b.Navigation("RegRequirement_EO_Links");

                    b.Navigation("SafetyHazard_EO_Links");

                    b.Navigation("SegmentObjective_Links");

                    b.Navigation("SimulatorScenario_EnablingObjectives_Links");

                    b.Navigation("Task_EnablingObjective_Links");

                    b.Navigation("TestItems");

                    b.Navigation("Version_EnablingObjectives");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Category", b =>
                {
                    b.Navigation("CustomEnablingObjectives");

                    b.Navigation("EnablingObjective_CategoryHistories");

                    b.Navigation("EnablingObjective_SubCategories");

                    b.Navigation("EnablingObjectives");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Question", b =>
                {
                    b.Navigation("Version_EnablingObjective_Questions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Step", b =>
                {
                    b.Navigation("Version_EnablingObjective_Steps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_SubCategory", b =>
                {
                    b.Navigation("CustomEnablingObjectives");

                    b.Navigation("EnablingObjective_SubCategoryHistories");

                    b.Navigation("EnablingObjective_Topics");

                    b.Navigation("EnablingObjectives");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Suggestion", b =>
                {
                    b.Navigation("Version_EnablingObjective_Suggestions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EnablingObjective_Topic", b =>
                {
                    b.Navigation("CustomEnablingObjectives");

                    b.Navigation("EnablingObjective_TopicHistories");

                    b.Navigation("EnablingObjectives");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.EvaluationMethod", b =>
                {
                    b.Navigation("TaskQualifications");

                    b.Navigation("TaskReQualificationEmp_SignOff");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.IDP", b =>
                {
                    b.Navigation("IDPSchedules");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.IDP_ReviewStatus", b =>
                {
                    b.Navigation("IDP_Reviews");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA", b =>
                {
                    b.Navigation("CBTs");

                    b.Navigation("ClassSchedules");

                    b.Navigation("EvaluationReleaseEMPSetting");

                    b.Navigation("IDPs");

                    b.Navigation("ILA_AssessmentTool_Links");

                    b.Navigation("ILA_EnablingObjective_Links");

                    b.Navigation("ILA_Evaluator_Links");

                    b.Navigation("ILA_NERCAudience_Links");

                    b.Navigation("ILA_NercStandard_Links");

                    b.Navigation("ILA_PerformTraineeEval");

                    b.Navigation("ILA_Position_Links");

                    b.Navigation("ILA_PreRequisite_Links");

                    b.Navigation("ILA_Procedure_Links");

                    b.Navigation("ILA_RegRequirement_Links");

                    b.Navigation("ILA_SafetyHazard_Links");

                    b.Navigation("ILA_Segment_Links");

                    b.Navigation("ILA_StudentEvaluation_Links");

                    b.Navigation("ILA_TaskObjective_Links");

                    b.Navigation("ILA_TrainingTopic_Links");

                    b.Navigation("ILA_Uploads");

                    b.Navigation("ILACertificationLinks");

                    b.Navigation("ILACollaborators");

                    b.Navigation("ILACustomObjective_Links");

                    b.Navigation("ILAHistories");

                    b.Navigation("ILATraineeEvaluations");

                    b.Navigation("Meta_ILAMembers_Links");

                    b.Navigation("Procedure_ILA_Links");

                    b.Navigation("RegRequirement_ILA_Links");

                    b.Navigation("SafetyHazard_ILA_Links");

                    b.Navigation("SelfRegistrationOption");

                    b.Navigation("SimulatorScenarioILA_Links");

                    b.Navigation("Task_ILA_Links");

                    b.Navigation("TestReleaseEMPSettings");

                    b.Navigation("TQILAEmpSettings");

                    b.Navigation("Version_ILAs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILACertificationLink", b =>
                {
                    b.Navigation("ILACertificationSubRequirementLink");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILATraineeEvaluation", b =>
                {
                    b.Navigation("DiscussionQuestions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ILA_Topic", b =>
                {
                    b.Navigation("ILAs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Instructor", b =>
                {
                    b.Navigation("ClassSchedules");

                    b.Navigation("Instructor_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Instructor_Category", b =>
                {
                    b.Navigation("Instructor_CategoryHistories");

                    b.Navigation("Instructors");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Location", b =>
                {
                    b.Navigation("ClassSchedules");

                    b.Navigation("Location_Histories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Location_Category", b =>
                {
                    b.Navigation("Location_CategoryHistories");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.MetaILA", b =>
                {
                    b.Navigation("Meta_ILAMembers_Links");

                    b.Navigation("Version_MetaILAs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.MetaILAAssessment", b =>
                {
                    b.Navigation("MetaILAs");

                    b.Navigation("Version_MetaILAs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.MetaILAConfigurationPublishOption", b =>
                {
                    b.Navigation("Meta_ILAMembers_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.MetaILA_Status", b =>
                {
                    b.Navigation("MetaILAs");

                    b.Navigation("Version_MetaILAs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.NERCTargetAudience", b =>
                {
                    b.Navigation("ILA_NERCAudience_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.NercStandard", b =>
                {
                    b.Navigation("ILA_NercStandard_Links");

                    b.Navigation("NercStandardMembers");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.NercStandardMember", b =>
                {
                    b.Navigation("ILA_NercStandard_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Organization", b =>
                {
                    b.Navigation("EmployeeOrganizations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Person", b =>
                {
                    b.Navigation("ClientUser");

                    b.Navigation("Employee");

                    b.Navigation("QTDUser");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Position", b =>
                {
                    b.Navigation("EmployeePositions");

                    b.Navigation("ILA_Position_Links");

                    b.Navigation("Position_Employees");

                    b.Navigation("Position_Histories");

                    b.Navigation("Position_SQs");

                    b.Navigation("Position_Tasks");

                    b.Navigation("SimulatorScenarioPositon_Links");

                    b.Navigation("Task_Positions");

                    b.Navigation("TrainingPrograms");

                    b.Navigation("Version_Positions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure", b =>
                {
                    b.Navigation("ILA_Procedure_Links");

                    b.Navigation("Procedure_EnablingObjective_Links");

                    b.Navigation("Procedure_ILA_Links");

                    b.Navigation("Procedure_RegRequirement_Links");

                    b.Navigation("Procedure_SaftyHazard_Links");

                    b.Navigation("Procedure_StatusHistories");

                    b.Navigation("Procedure_Task_Links");

                    b.Navigation("ProcedureReviews");

                    b.Navigation("Version_Procedures");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ProcedureReview", b =>
                {
                    b.Navigation("ProcedureReview_Employee");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Procedure_IssuingAuthority", b =>
                {
                    b.Navigation("IssuingAuthorityStatusHistories");

                    b.Navigation("Procedures");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Provider", b =>
                {
                    b.Navigation("ClassSchedules");

                    b.Navigation("ILAs");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ProviderLevel", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.QuestionBank", b =>
                {
                    b.Navigation("QuestionBankHistories");

                    b.Navigation("StudentEvaluationQuestions");

                    b.Navigation("StudentEvaluationWithoutEmps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RR_IssuingAuthority", b =>
                {
                    b.Navigation("RegulatoryRequirements");

                    b.Navigation("RR_IssuingAuthority_StatusHistories");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RatingScale", b =>
                {
                    b.Navigation("StudentEvaluationForms");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RatingScaleN", b =>
                {
                    b.Navigation("RatingScaleExpanded");

                    b.Navigation("StudentEvaluations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.RegulatoryRequirement", b =>
                {
                    b.Navigation("ILA_RegRequirement_Links");

                    b.Navigation("Procedure_RegRequirement_Links");

                    b.Navigation("RegRequirement_EO_Links");

                    b.Navigation("RegRequirement_ILA_Links");

                    b.Navigation("RR_StatusHistories");

                    b.Navigation("RR_Task_Links");

                    b.Navigation("SaftyHazard_RR_Links");

                    b.Navigation("Version_RegulatoryRequirements");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Report", b =>
                {
                    b.Navigation("DisplayColumns");

                    b.Navigation("Filters");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ReportSkeleton", b =>
                {
                    b.Navigation("AvailableFilters");

                    b.Navigation("DisplayColumns");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SafetyHazard_Set", b =>
                {
                    b.Navigation("SafetyHazard_Set_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SaftyHazard", b =>
                {
                    b.Navigation("ILA_SafetyHazard_Links");

                    b.Navigation("Procedure_SaftyHazard_Links");

                    b.Navigation("SafetyHazard_EO_Links");

                    b.Navigation("SafetyHazard_Histories");

                    b.Navigation("SafetyHazard_ILA_Links");

                    b.Navigation("SafetyHazard_Set_Links");

                    b.Navigation("SafetyHazard_Task_Links");

                    b.Navigation("SafetyHazard_Tool_Links");

                    b.Navigation("SaftyHazard_Abatements");

                    b.Navigation("SaftyHazard_Controls");

                    b.Navigation("SaftyHazard_RR_Links");

                    b.Navigation("Version_SaftyHazards");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SaftyHazard_Category", b =>
                {
                    b.Navigation("SafetyHazard_CategoryHistories");

                    b.Navigation("SaftyHazards");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Segment", b =>
                {
                    b.Navigation("ILA_Segment_Links");

                    b.Navigation("SegmentObjective_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenario", b =>
                {
                    b.Navigation("SimulatorScenario_EnablingObjectives_Links");

                    b.Navigation("SimulatorScenarioILA_Links");

                    b.Navigation("SimulatorScenarioPositon_Links");

                    b.Navigation("SimulatorScenarioTaskObjectives_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SimulatorScenarioDifficultyLevel", b =>
                {
                    b.Navigation("SimulatorScenarios");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluation", b =>
                {
                    b.Navigation("ClassSchedule_Evaluation_Rosters");

                    b.Navigation("ClassSchedule_StudentEvaluations_Links");

                    b.Navigation("ILA_StudentEvaluation_Links");

                    b.Navigation("StudentEvaluationHistories");

                    b.Navigation("StudentEvaluationQuestions");

                    b.Navigation("StudentEvaluationWithoutEmps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationAudience", b =>
                {
                    b.Navigation("ILA_StudentEvaluation_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationAvailability", b =>
                {
                    b.Navigation("ILA_StudentEvaluation_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationForm", b =>
                {
                    b.Navigation("ILA_StudentEvaluation_Links");

                    b.Navigation("StudentEvaluationQuestions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.StudentEvaluationQuestion", b =>
                {
                    b.Navigation("StudentEvaluationWithoutEmps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.SubdutyArea", b =>
                {
                    b.Navigation("SubDutyArea_Histories");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task", b =>
                {
                    b.Navigation("Employee_Tasks");

                    b.Navigation("ILA_TaskObjective_Links");

                    b.Navigation("Position_Tasks");

                    b.Navigation("Procedure_Task_Links");

                    b.Navigation("RR_Task_Links");

                    b.Navigation("SafetyHazard_Task_Links");

                    b.Navigation("SegmentObjective_Links");

                    b.Navigation("SimulatorScenarioTaskObjectives_Links");

                    b.Navigation("Task_Collaborator_Links");

                    b.Navigation("Task_EnablingObjective_Links");

                    b.Navigation("Task_Histories");

                    b.Navigation("Task_ILA_Links");

                    b.Navigation("Task_MetaTask_Links");

                    b.Navigation("Task_Positions");

                    b.Navigation("Task_Questions");

                    b.Navigation("Task_Reference_Links");

                    b.Navigation("Task_Steps");

                    b.Navigation("Task_Suggestions");

                    b.Navigation("Task_Tools");

                    b.Navigation("Task_TrainingGroups");

                    b.Navigation("TaskQualifications");

                    b.Navigation("Version_Tasks");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskQualification", b =>
                {
                    b.Navigation("TaskQualification_Evaluator_Links");

                    b.Navigation("TaskReQualificationEmp_QuestionAnswers");

                    b.Navigation("TaskReQualificationEmp_SignOff");

                    b.Navigation("TaskReQualificationEmp_Steps");

                    b.Navigation("TaskReQualificationEmp_Suggestions");

                    b.Navigation("TQEmpSetting");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaskQualificationStatus", b =>
                {
                    b.Navigation("TaskQualifications");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_CollaboratorInvitation", b =>
                {
                    b.Navigation("Task_Collaborator_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Question", b =>
                {
                    b.Navigation("TaskReQualificationEmp_QuestionAnswers");

                    b.Navigation("Version_Task_Questions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Reference", b =>
                {
                    b.Navigation("Task_Reference_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Step", b =>
                {
                    b.Navigation("TaskReQualificationEmp_Steps");

                    b.Navigation("Version_Task_Steps");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Task_Suggestion", b =>
                {
                    b.Navigation("TaskReQualificationEmp_Suggestions");

                    b.Navigation("Version_Task_Suggestions");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TaxonomyLevel", b =>
                {
                    b.Navigation("TestItems");

                    b.Navigation("Version_TestItems");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Test", b =>
                {
                    b.Navigation("ClassSchedule_Employees");

                    b.Navigation("ClassSchedule_Rosters");

                    b.Navigation("ILATraineeEvaluations");

                    b.Navigation("Test_Histories");

                    b.Navigation("Test_Item_Links");

                    b.Navigation("TestReleaseEMPSetting_Retake_Links");

                    b.Navigation("TestReleaseEMPSettings");

                    b.Navigation("Version_Tests");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItem", b =>
                {
                    b.Navigation("Test_Item_Links");

                    b.Navigation("TestItem_Histories");

                    b.Navigation("TestItemFillBlanks");

                    b.Navigation("TestItemMatches");

                    b.Navigation("TestItemMCQs");

                    b.Navigation("TestItemShortAnswers");

                    b.Navigation("TestItemTrueFalses");

                    b.Navigation("Version_TestItems");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestItemType", b =>
                {
                    b.Navigation("EmpTests");

                    b.Navigation("TestItems");

                    b.Navigation("Version_TestItems");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestReleaseEMPSettings", b =>
                {
                    b.Navigation("TestReleaseEMPSetting_Retake_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestStatus", b =>
                {
                    b.Navigation("Tests");

                    b.Navigation("Version_Tests");

                    b.Navigation("Version_TestStauses");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TestType", b =>
                {
                    b.Navigation("ClassSchedule_Rosters");

                    b.Navigation("ILATraineeEvaluations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Tool", b =>
                {
                    b.Navigation("EnablingObjective_Tools");

                    b.Navigation("SafetyHazard_Tool_Links");

                    b.Navigation("Task_Tools");

                    b.Navigation("Tool_StatusHistories");

                    b.Navigation("ToolGroup_Tools");

                    b.Navigation("Version_Tools");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ToolCategory", b =>
                {
                    b.Navigation("Tools");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.ToolGroup", b =>
                {
                    b.Navigation("ToolGroup_Tools");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TraineeEvaluationType", b =>
                {
                    b.Navigation("ILATraineeEvaluations");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingGroup", b =>
                {
                    b.Navigation("Task_TrainingGroups");

                    b.Navigation("Version_TrainingGroups");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingGroup_Category", b =>
                {
                    b.Navigation("TrainingGroups");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingProgram", b =>
                {
                    b.Navigation("TrainingProgram_Histories");

                    b.Navigation("TrainingProgram_ILA_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingProgramType", b =>
                {
                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingTopic", b =>
                {
                    b.Navigation("ILA_TrainingTopic_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.TrainingTopic_Category", b =>
                {
                    b.Navigation("TrainingTopics");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Employee", b =>
                {
                    b.Navigation("Version_EnablingObjective_Employee_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_EnablingObjective", b =>
                {
                    b.Navigation("EnablingObjectiveHistories");

                    b.Navigation("Version_EnablingObjective_Employee_Links");

                    b.Navigation("Version_EnablingObjective_ILALinks");

                    b.Navigation("Version_EnablingObjective_MetaEOLinks");

                    b.Navigation("Version_EnablingObjective_Position_Links");

                    b.Navigation("Version_EnablingObjective_Procedure_Links");

                    b.Navigation("Version_EnablingObjective_Questions");

                    b.Navigation("Version_EnablingObjective_RRLinks");

                    b.Navigation("Version_EnablingObjective_SaftyHazard_Links");

                    b.Navigation("Version_EnablingObjective_Steps");

                    b.Navigation("Version_EnablingObjective_Suggestions");

                    b.Navigation("Version_EnablingObjective_Tasks");

                    b.Navigation("Version_EnablingObjective_Tool_Links");

                    b.Navigation("Version_Procedure_EnablingObjective_Links");

                    b.Navigation("Version_Task_EnablingObjective_Links");

                    b.Navigation("Version_TestItems");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_ILA", b =>
                {
                    b.Navigation("Version_EnablingObjective_ILALinks");

                    b.Navigation("Version_Task_ILA_Links");

                    b.Navigation("Version_TrainingProgram_ILA_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Position", b =>
                {
                    b.Navigation("Version_EnablingObjective_Position_Links");

                    b.Navigation("Version_Task_Position_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Procedure", b =>
                {
                    b.Navigation("Version_EnablingObjective_Procedure_Links");

                    b.Navigation("Version_Procedure_EnablingObjective_Links");

                    b.Navigation("Version_Procedure_SaftyHazard_Links");

                    b.Navigation("Version_Procedure_Tool_Links");

                    b.Navigation("Version_Task_Procedure_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_RegulatoryRequirement", b =>
                {
                    b.Navigation("Version_EnablingObjective_RRLinks");

                    b.Navigation("Version_Task_RR_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_SaftyHazard", b =>
                {
                    b.Navigation("Version_EnablingObjective_SaftyHazard_Links");

                    b.Navigation("Version_Procedure_SaftyHazard_Links");

                    b.Navigation("Version_SaftyHazard_Abatements");

                    b.Navigation("Version_SaftyHazard_Controls");

                    b.Navigation("Version_Task_SaftyHazard_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Task", b =>
                {
                    b.Navigation("Task_Histories");

                    b.Navigation("Version_EnablingObjective_Tasks");

                    b.Navigation("Version_Task_EnablingObjective_Links");

                    b.Navigation("Version_Task_ILA_Links");

                    b.Navigation("Version_Task_MetaTask_Links");

                    b.Navigation("Version_Task_Position_Links");

                    b.Navigation("Version_Task_Procedure_Links");

                    b.Navigation("Version_Task_Questions");

                    b.Navigation("Version_Task_RR_Links");

                    b.Navigation("Version_Task_SaftyHazard_Links");

                    b.Navigation("Version_Task_Steps");

                    b.Navigation("Version_Task_Suggestions");

                    b.Navigation("Version_Task_Tool_Links");

                    b.Navigation("Version_Task_TrainingGroups");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_Tool", b =>
                {
                    b.Navigation("Version_EnablingObjective_Tool_Links");

                    b.Navigation("Version_Procedure_Tool_Links");

                    b.Navigation("Version_Task_Tool_Links");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TrainingGroup", b =>
                {
                    b.Navigation("Version_Task_TrainingGroups");
                });

            modelBuilder.Entity("QTD2.Domain.Entities.Core.Version_TrainingProgram", b =>
                {
                    b.Navigation("Version_TrainingProgram_ILA_Links");
                });
#pragma warning restore 612, 618
        }
    }
}
