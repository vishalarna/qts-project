@using RazorEngine.Text
@using QTD2.Infrastructure.Reports.Generation
@using QTD2.Infrastructure.ExtensionMethods
<style>
    .table {
        font-family: Roboto, "Helvetica Neue", sans-serif;
        color: #000;
        border-collapse: collapse;
        width: 100%;
    }

    a.pagerNumber {
        text-decoration: none;
        background-color: white;
        color: black;
    }

        a.pagerNumber:hover {
            text-decoration: none;
            background-color: cornflowerblue;
            color: white;
        }

    .strip {
        margin: 10px 0px;
    }

    .strip-container .strip-dark {
        height: 10px;
        background-color: #e8e8e8;
    }

    .padding-class td, .padding-class th {
        padding: 5px;
        text-align: left;
    }

    .rich-text p {
        margin: 0 !important;
        padding: 0 !important;
    }

    .rich-text figure {
        margin: 0 !important;
        padding: 0 !important;
    }

    .rich-text img {
        width: 400px !important;
        height: auto !important;
        display: block !important;
        padding: 0 !important;
        margin: 0 !important;
        object-fit: cover;
        overflow: hidden;
    }

    .rich-text ul, .rich-text ol {
        margin: 0 !important;
        padding: 0 0 0 0px !important;
        list-style-position: inside !important;
    }

    .rich-text figure img {
        width: 400px !important;
        height: auto !important;
        display: block !important;
        padding: 0 !important;
        margin: 0 !important;
        object-fit: cover;
        overflow: hidden;
    }

    .rich-text li {
        margin: 0 !important;
        padding: 0 !important;
    }

    @@media print {
        .pager {
            display: none !important;
        }

        .strip-container .strip-dark {
            background-color: white;
        }
    }
</style>
@{
    var instructorLedSummaryData = Model.InstructorLedClasses.GroupBy(x => x.ClassSchedule.ILA).Select(m => new
    {
        ILA = m.Key,
        InstructorLedDataModel = m.ToList()
    }).ToList();
}
<table id="content-table" class="table" width="100%">
    <tr>
        <td colspan="12" style="vertical-align: middle; margin:0  !important;text-align: center; border: none !important;padding-bottom:0px">
            <div class="repeatedReportHeader" style="border-bottom: 3px solid #020378;padding-bottom:1px">
                <div style="display: -webkit-box; display: flex; align-items: center; -webkit-box-pack: justify;-webkit-box-align:center; border-bottom: 3px solid #020378;padding-top:10px;">
                    @if (!string.IsNullOrEmpty(Model.CompanyLogo))
                    {
                        <div style="width: 25%;">
                            <img src="@Model.CompanyLogo" alt="Company logo" style="height: 46px;width: 65px;padding-bottom: 10px;float: left;width: 150px !important;height: 65px !important;object-fit: scale-down !important;" />
                        </div>
                    }
                    else
                    {
                        <div style="width: 20%;"></div>
                    }
                    <div style="width: 50%; text-align: center; font-size: 24px; color: #020378;">
                        <b>@Model.Title </b>
                    </div>
                    <div style="width: 25%;text-align: right;"><b>Printed Date:</b> @DateTime.Now.ConvertToDefaultTimeZone(Model.DefaultTimeZone).ToShortDateString()</div>
                </div>
            </div>
        </td>
    </tr>
    @if (Model.InstructorLedClasses.Count() > 0)
    {
        <tr>
            <td colspan="12" style="border: none; padding-top: 0;" class="strip-container">
                @{
                    int j = 1;
                    var preceedingColumns =
                    (Model.DisplayColumns.Where(r => r == "Class Start Date & Time").Count() > 0 ? 1 : 0) +
                    (Model.DisplayColumns.Where(r => r == "Class End Date & Time").Count() > 0 ? 1 : 0) +
                    (Model.DisplayColumns.Where(r => r == "Instructor").Count() > 0 ? 1 : 0) +
                    (Model.DisplayColumns.Where(r => r == "Location").Count() > 0 ? 1 : 0); // "# of Forms Completed" and "# of Enrolled Students"
                }
                @foreach (var dataModel in instructorLedSummaryData)
                {
                    <div class="@(j != 1 ? "strip-dark" : "")"></div>
                    <div style="padding:5px;padding-bottom:0" id="@("page" + j)" class="@(j % 2 == 0 ? "strip" : "")">
                        @if (instructorLedSummaryData.SelectMany(x => x.InstructorLedDataModel).Select(m => m.ClassSchedule?.Id).Distinct().Count() > 1)
                        {
                            <table class="table" style="margin:0;padding:0;">
                                @if (Model.DisplayColumns.Where(r => r == "Provider").Count() > 0)
                                {
                                    <tr>
                                        <td colspan="12" style=" border: none !important;font-weight:600; font-size: 18px;padding:7px 0px">
                                            <div style="display: -webkit-box; display: flex;"><div>Provider :</div><div style="padding-left:7px;">@dataModel.ILA?.Provider?.Name</div></div>
                                        </td>
                                    </tr>
                                }
                                @if (Model.DisplayColumns.Where(r => r == "ILA").Count() > 0)
                                {
                                    <tr>
                                        <td colspan="12" style=" border: none !important;font-size:18px;font-weight:600; padding:7px 0px">
                                            <div style="display: -webkit-box; display: flex;"><div>@("ILA".ReplaceLabel(Model.ClientSettings_LabelReplacements)) :</div><div style="overflow-wrap: break-word; white-space: normal;width:90%;padding-left:7px;">@dataModel?.ILA?.Number / @dataModel?.ILA?.Name</div></div>
                                        </td>
                                    </tr>
                                }
                                <tr>
                                    <td colspan="12" style="border:none;padding:7px 0px;"><span style="font-weight:600;text-decoration:underline;">Classes included in the @("ILA".ReplaceLabel(Model.ClientSettings_LabelReplacements))</span></td>
                                </tr>
                                <tr class="padding-class">
                                    @if (preceedingColumns == 0)
                                    {
                                        <th style="border:1px solid #000;"></th>
                                    }
                                    @if (Model.DisplayColumns.Where(r => r == "Class Start Date & Time").Count() > 0)
                                    {
                                        <th style="border:1px solid #000;" rowspan="2">Class Start Date</th>
                                    }
                                    @if (Model.DisplayColumns.Where(r => r == "Class End Date & Time").Count() > 0)
                                    {
                                        <th style="border:1px solid #000;" rowspan="2">Class End Date</th>
                                    }
                                    @if (Model.DisplayColumns.Where(r => r == "Instructor").Count() > 0)
                                    {
                                        <th style="border:1px solid #000;" rowspan="2">@("Instructor".ReplaceLabel(Model.ClientSettings_LabelReplacements))</th>
                                    }
                                    @if (Model.DisplayColumns.Where(r => r == "Location").Count() > 0)
                                    {
                                        <th style="border:1px solid #000;" rowspan="2">@("Location".ReplaceLabel(Model.ClientSettings_LabelReplacements))</th>
                                    }
                                    <th style="border:1px solid #000;" rowspan="2"># of Forms Completed</th>
                                    <th style="border:1px solid #000;" rowspan="2"># of Enrolled Students</th>
                                    <th style="border:1px solid #000;" colspan="3">Overall Averages for Class</th>
                                </tr>
                                <tr class="padding-class">
                                    @if (preceedingColumns == 0)
                                    {
                                        <th style="border:1px solid #000;"></th>
                                    }
                                    <th style="border:1px solid #000;">High</th>
                                    <th style="border:1px solid #000;">Low</th>
                                    <th style="border:1px solid #000;">Average</th>
                                </tr>
                                @{
                                    var totalCompletedForms = dataModel.InstructorLedDataModel.Sum(m => m.ClassScheduleEvaluationRosters.Count(x => x.IsCompleted));
                                    var totalForms = dataModel.InstructorLedDataModel.Sum(r => r.ClassScheduleEvaluationRosters.Select(r => r.EmployeeId).Distinct().Count());
                                }
                                @foreach (var data in dataModel.InstructorLedDataModel)
                                {
                                    @{
                                        var studentEmps = data.StudentEvaluationWithoutEmps.Where(r => r.RatingScale.HasValue && r.RatingScaleExpanded.Ratings != 0);
                                    }
                                    <tr class="padding-class">
                                        @if (preceedingColumns == 0)
                                        {
                                            <td style="border:1px solid #000;"></td>
                                        }
                                        @if (Model.DisplayColumns.Where(r => r == "Class Start Date & Time").Count() > 0)
                                        {
                                            <td style="border:1px solid #000;">@data.ClassSchedule.StartDateTime.ConvertToDefaultTimeZone(Model.DefaultTimeZone).ToString(Model.DefaultDateFormat)</td>
                                        }
                                        @if (Model.DisplayColumns.Where(r => r == "Class End Date & Time").Count() > 0)
                                        {
                                            <td style="border:1px solid #000;">@data.ClassSchedule.EndDateTime.ConvertToDefaultTimeZone(Model.DefaultTimeZone).ToString(Model.DefaultDateFormat)</td>
                                        }
                                        @if (Model.DisplayColumns.Where(r => r == "Instructor").Count() > 0)
                                        {
                                            <td style="border:1px solid #000;">@data.ClassSchedule?.Instructor?.InstructorName</td>
                                        }
                                        @if (Model.DisplayColumns.Where(r => r == "Location").Count() > 0)
                                        {
                                            <td style="border:1px solid #000;">@data.ClassSchedule?.Location?.LocName</td>
                                        }
                                        <td style="border:1px solid #000;">@data.ClassScheduleEvaluationRosters.Where(x => x.IsCompleted).Count()</td>
                                        <td style="border:1px solid #000;">@data.ClassScheduleEvaluationRosters.Select(r => r.EmployeeId).Distinct().Count()</td>
                                        <td style="border:1px solid #000;">@(studentEmps.Count() > 0 ? studentEmps.Max(r => r.RatingScaleExpanded.Ratings) : 0)</td>
                                        <td style="border:1px solid #000;">@(studentEmps.Count() > 0 ? studentEmps.Min(r => r.RatingScaleExpanded.Ratings) : 0)</td>
                                        <td style="border:1px solid #000;">@(studentEmps.Count() > 0 ? Math.Round(studentEmps.Average(r => r.RatingScaleExpanded.Ratings), 2) : 0)</td>
                                    </tr>
                                }
                                <tr class="padding-class">
                                    @if (preceedingColumns == 0)
                                    {
                                        <td style="border:none;font-weight:600;text-align:right;padding-right:20px;">Total</td>
                                    }
                                    else
                                    {
                                        <td style="border:none;font-weight:600;text-align:right;padding-right:20px;" colspan=@preceedingColumns>Total</td>
                                    }
                                    <td style="border:none;font-weight:600">@totalCompletedForms</td>
                                    <td style="border:none;font-weight:600">@totalForms</td>
                                    <td style="display:none" colspan="3"></td>
                                </tr>
                            </table>
                            @if (Model.ShowSummaryofCommentsOnly)
                            {
                                var questions = dataModel.InstructorLedDataModel
                                .SelectMany(x => x.StudentEvaluation.StudentEvaluationQuestions.Select(q => q.QuestionBank)).Distinct().ToList();

                                int questionNumber = 1;

                                <table class="table">
                                    @foreach (var question in questions)
                                    {
                                        <tr style="font-weight:600">
                                            <td colspan="12" style="border: 0; padding:0 10px 0 1.75rem;font-size:15px;">
                                                <div style="display: -webkit-box; display: flex;"><span>@questionNumber.ToString().</span> <span class="rich-text">@(new RawString(question.Stem))</span></div>
                                            </td>
                                        </tr>
                                        @{
                                            var studentEvalWithoutEmpData = dataModel.InstructorLedDataModel.Where(i => i.StudentEvaluationWithoutEmps.Any(r => r.QuestionId == question.Id && !string.IsNullOrWhiteSpace(r.Notes)))
                                            .OrderBy(i => i.ClassSchedule.EndDateTime);
                                        }
                                        @foreach (var item in studentEvalWithoutEmpData)
                                        {
                                            var notes = string.Join("<br />", item.StudentEvaluationWithoutEmps
                                            .Where(r => r.QuestionId == question.Id && !string.IsNullOrWhiteSpace(r.Notes))
                                            .Select(r => r.Notes));

                                            if (!string.IsNullOrWhiteSpace(notes))
                                            {
                                                <tr>
                                                    <td colspan="12" style="border: 0; padding: 0rem; color: #000;font-size:15px; padding-left: 3.1em; padding-bottom: 0.5rem;">
                                                        <div style="display: -webkit-box; display: flex;">
                                                            <span>@item.ClassSchedule.EndDateTime.ConvertToDefaultTimeZone(Model.DefaultTimeZone).ToString(Model.DefaultDateFormat):</span>
                                                            <span style="padding-left: 0.6em;" class="rich-text">@(new RawString(notes))</span>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        questionNumber++;
                                    }
                                    <tr></tr>
                                </table>
                            }
                        }
                        @foreach (var data in dataModel.InstructorLedDataModel)
                        {
                            @if (instructorLedSummaryData.SelectMany(x => x.InstructorLedDataModel).Select(m => m.ClassSchedule?.Id).Distinct().Count() > 1)
                            {
                                <div style="page-break-before:always;margin:5px 0;"></div>
                            }
                            <table class="table">
                                @if (Model.DisplayColumns.Where(r => r == "Provider").Count() > 0)
                                {
                                    <tr>
                                        <td colspan="12" style=" border: none !important; font-size: 18px;padding:10px 0px 3px 0px ">
                                            <div style="display: -webkit-box; display: flex; "> <b style="width: 140px "> Provider :</b>  <div><b> @data.ClassSchedule?.ILA?.Provider?.Name</b></div></div>
                                        </td>
                                    </tr>
                                }
                                @if (Model.DisplayColumns.Where(r => r == "ILA").Count() > 0)
                                {
                                    <tr>
                                        <td colspan="12" style=" border: none !important;font-size:18px; padding:3px 0px">
                                            <div style="display: -webkit-box; display: flex; "> <b style="width: 140px ">  @("ILA".ReplaceLabel(Model.ClientSettings_LabelReplacements)):</b><div style="overflow-wrap: break-word; white-space: normal;width:90%"> <b>@data.ClassSchedule?.ILA?.Number / @data.ClassSchedule?.ILA?.Name</b></div></div>
                                        </td>
                                    </tr>
                                }
                                @if (Model.DisplayColumns.Where(r => r == "Class Start Date & Time").Count() > 0)
                                {
                                    <tr>
                                        <td colspan="12" style=" border: none !important; font-size: 18px; padding:3px 0px;">
                                            <div style="display: -webkit-box; display: flex; "><b style="width: 140px "> Class Start Date:</b> <div> @data.ClassSchedule.StartDateTime.ConvertToDefaultTimeZone(Model.DefaultTimeZone).ToString(Model.DefaultDateFormat) </div></div>
                                        </td>
                                    </tr>
                                }
                                @if (Model.DisplayColumns.Where(r => r == "Class End Date & Time").Count() > 0)
                                {
                                    <tr>
                                        <td colspan="12" style=" border: none !important; font-size: 18px; padding:3px 0px">
                                            <div style="display: -webkit-box; display: flex; "><b style="width: 140px "> Class End Date:</b> <div> @data.ClassSchedule.EndDateTime.ConvertToDefaultTimeZone(Model.DefaultTimeZone).ToString(Model.DefaultDateFormat) </div></div>
                                        </td>
                                    </tr>
                                }
                                @if (Model.DisplayColumns.Where(r => r == "Instructor").Count() > 0)
                                {
                                    <tr>
                                        <td colspan="12" style=" border: none !important; font-size: 18px; padding:3px 0px">
                                            <div style="display: -webkit-box; display: flex; "><b style="width: 140px ">  @("Instructor".ReplaceLabel(Model.ClientSettings_LabelReplacements)):</b> <div> @data.ClassSchedule.Instructor?.InstructorName</div></div>
                                        </td>
                                    </tr>
                                }
                                @if (Model.DisplayColumns.Where(r => r == "Location").Count() > 0)
                                {
                                    <tr>
                                        <td colspan="12" style=" border: none !important; font-size: 18px; padding:3px 0px">
                                            <div style="display: -webkit-box; display: flex; "><b style="width: 140px ">  @("Location".ReplaceLabel(Model.ClientSettings_LabelReplacements)):</b> <div> @(data.ClassSchedule.Location == null ? "" : data.ClassSchedule.Location.LocName)</div></div>
                                        </td>
                                    </tr>
                                }
                                @if (Model.DisplayColumns.Where(r => r == "Form Name").Count() > 0)
                                {
                                    <tr>
                                        <td colspan="12" style=" border: none !important; font-size:18px; padding:3px 0px">
                                            <div style="display: -webkit-box; display: flex; "><b style="width: 140px "> Form Used:</b> <div>@data.StudentEvaluation.Title</div> </div>
                                        </td>
                                    </tr>
                                }
                                <tr>
                                    <td colspan="3" style=" border: none !important; font-size:15px; padding-top: 3px; padding-bottom: 3px;">
                                        <div style="display: -webkit-box; display: flex; "><b>No. of Forms Completed:</b> <div style="padding-left: 0.5rem;"> <b>@(data.ClassScheduleEvaluationRosters.Where(x => x.IsCompleted).Count())</b></div> </div>
                                    </td>
                                    <td colspan="3" style=" border: none !important; font-size:15px; padding-top: 3px; padding-bottom: 3px;">
                                        <div style="display: -webkit-box; display: flex; "><b>No. of Participants:</b> <div style="padding-left: 0.5rem;"><b>@data.ClassScheduleEvaluationRosters.Select(r => r.EmployeeId).Distinct().Count()</b></div> </div>
                                    </td>
                                    <td colspan="3" style=" border: none !important; font-size:15px; padding-top: 3px; padding-bottom: 3px;">
                                        <div style="display: -webkit-box; display: flex; ">
                                            <b> % Completed:</b>
                                            <div style="padding-left: 0.5rem;">
                                                @{
                                                    var formsCompleted = data.ClassScheduleEvaluationRosters.Where(x => x.IsCompleted).Count();
                                                    var totalParticipants = data.ClassScheduleEvaluationRosters.Select(r => r.EmployeeId).Distinct().Count();

                                                    if (totalParticipants > 0)
                                                    {
                                                        var percentageCompleted = (decimal)formsCompleted / totalParticipants * 100;

                                                        @percentageCompleted.ToString("0.0")
                                                    }
                                                }%
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                @{
                                    var emps = data.StudentEvaluationWithoutEmps.Where(r => r.RatingScale.HasValue && r.RatingScaleExpanded.Ratings != 0);
                                }
                                <tr>
                                    <td colspan="9" style="padding:0rem 0.7rem;padding-top: 20px; color: #800000; border: 0; padding-bottom: 2px"><b>@data.StudentEvaluation.RatingScaleN.RatingScaleDescription</b></td>
                                    <td colspan="3" style="text-align: center; padding: 0rem 0.7rem; padding-top: 20px; text-decoration: underline; border: 0; font-weight: 500; color: #000; padding-bottom: 2px">Rating:</td>
                                </tr>
                                <tr>
                                    <td colspan="9" style="text-decoration: underline; font-weight: 500; color: #000; border:0;padding:0 12px 0 0.7rem;">Questions</td>
                                    <td colspan="1" style="text-decoration: underline; font-weight: 500; color: #000; border: 0; padding-bottom: 0; padding-top:0;text-align:center">High:</td>
                                    <td colspan="1" style="text-decoration: underline; font-weight: 500; color: #000; border: 0; padding-bottom: 0; padding-top:0;text-align:center">Low:</td>
                                    <td colspan="1" style="text-decoration: underline; font-weight: 500; color: #000; border: 0; padding-bottom: 0; padding-top:0;text-align:center">AVG:</td>
                                </tr>
                                @{
                                    int index = 1;
                                }
                                @foreach (var question in @data.StudentEvaluation.StudentEvaluationQuestions.Select(r => r.QuestionBank).Distinct())
                                {
                                    var responses = data.StudentEvaluationWithoutEmps.Where(r => r.QuestionId == question.Id).Where(r => r.RatingScale.HasValue).Where(r => r.RatingScaleExpanded != null && r.RatingScaleExpanded.Ratings != 0);

                                    <tr style="font-weight: 500; border-bottom: 1px dashed #000;">
                                        <td colspan="9" style="border:0; padding-top:0; padding-bottom:0;padding-left:1.75rem">
                                            <div style="display: -webkit-box; display: flex;"><span>@index.ToString().</span> <span class="rich-text">@(new RawString(question.Stem))</span></div>
                                        </td>
                                        <td colspan="1" style="border: 0;text-align:center; padding-top: 0; padding-bottom: 0;">
                                            @{
                                                var validRatings = data.StudentEvaluationWithoutEmps.Where(r => r.QuestionId == question.Id && r.RatingScale.HasValue && r.RatingScaleExpanded?.Ratings != 0).Select(r => r.RatingScaleExpanded.Ratings).ToList();
                                                string maxDisplay = validRatings.Any() ? validRatings.Max().ToString("#.##") : "";
                                            }
                                            @maxDisplay
                                        </td>
                                        <td colspan="1" style="border: 0;text-align:center; padding-top: 0; padding-bottom: 0;">@(responses.Count() == 0 ? "" : responses.Min(r => r.RatingScaleExpanded.Ratings).ToString("#.##"))</td>
                                        <td colspan="1" style="border: 0;text-align:center; padding-top: 0; padding-bottom: 0;">@(responses.Count() == 0 ? "" : responses.Average(r => r.RatingScaleExpanded.Ratings).ToString("#.##"))</td>
                                    </tr>
                                    index++;
                                }
                                <tr style="font-weight:500">
                                    <td colspan="9" style="border: none; padding: 3px 5px ; "></td>
                                    <td colspan="1" style="border: none;border-top:2px solid #000;text-align:center;  padding: 3px 5px ">@(emps.Count() > 0 ? emps.Max(r => r.RatingScaleExpanded.Ratings) : 0)</td>
                                    <td colspan="1" style="border: none;border-top:2px solid #000;text-align:center;  padding: 3px 5px ">@(emps.Count() > 0 ? emps.Min(r => r.RatingScaleExpanded.Ratings) : 0)</td>
                                    <td colspan="1" style="border: none;border-top:2px solid #000;text-align:center;  padding: 3px 5px ">@(emps.Count() > 0 ? Math.Round(emps.Average(r => r.RatingScaleExpanded.Ratings), 2) : 0)</td>
                                    <td colspan="1" style="border: none; padding: 3px 5px "></td>
                                </tr>
                                @if (Model.DisplayColumns.Where(r => r == "Evaluation Comments").Count() > 0)
                                {
                                    @{
                                        int i = 1;
                                    }
                                    @foreach (var question in @data.StudentEvaluation.StudentEvaluationQuestions.Select(r => r.QuestionBank).Distinct())
                                    {
                                        <tr style="font-weight:500">
                                            <td colspan="12" style="border: 0; padding:0 10px 0 1.75rem"> <div style="display: -webkit-box; display: flex;"><span>@i.ToString().</span> <span class="rich-text">@(new RawString(question.Stem))</span></div></td>
                                        </tr>
                                        <tr>
                                            <td colspan="12" style="border: 0; padding: 0rem; font-weight: 500; color: #000; padding-left: 3.1em; padding-bottom: 0.5rem;">
                                                <div style="display: -webkit-box; display: flex;">
                                                        <span style="text-decoration: underline;">Comments:</span>
                                                        <span style="padding-left: 0.3em;" class="rich-text">@(new RawString(string.Join("<br />", data.StudentEvaluationWithoutEmps.Where(r => r.QuestionId == question.Id && !string.IsNullOrWhiteSpace(r.Notes)).Select(emp => emp.Notes))))</span>
                                                </div>
                                            </td>
                                        </tr>
                                        i++;
                                    }
                                }
                                <tr></tr>
                            </table>
                        }
                    </div>
                    @if (j != instructorLedSummaryData.Count())
                    {
                        <div style="page-break-after: always;"></div>
                        <div class="@(j != 1  ? "strip-dark" : "")"></div>
                    }
                    @{
                        j++;
                    }
                }
            </td>
        </tr>
    }
    else
    {
        <tr style="border:none">
            <td style="border:none;text-align:center">
                <i>No data available to generate requested report</i>
            </td>
        </tr>
    }
</table>
<div class="pager" style="display: flex; justify-content: flex-start; align-items: center; background-color: white; border-top: 1px solid #d5d3d366; width: 100%; max-width: 100%; overflow-x: auto; position: sticky; bottom: 0; right: 0px; overflow-y: hidden; white-space: nowrap; ">

    @for (int i = 1; i <= instructorLedSummaryData.Count(); i++)
    {
        <a href=@("#page"+i) class="pagerNumber" style="padding:0.9rem;">@i</a>
    }
</div>
